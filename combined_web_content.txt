--- LIST OF ALL .js, .css, .html, .png FILES IN: /Users/ihnore_ihor/WebstormProjects/PI-CMS ---
Generated on: вт 10 чер 2025 20:32:23 EEST
(Excluding 'node_modules' directories)
--------------------------------------------------------------------------------
idea_node/server.js
idea_node/schemas/Message.js
idea_node/schemas/User.js
idea_node/schemas/Chat.js
idea/Students.html
idea/init_sw.js
idea/index.html
idea/Tasks.html
idea/auth.js
idea/Students.css
idea/index.js
idea/login.html
idea/Dashboard.html
idea/Tasks.js
idea/Students.js
idea/login.js
idea/Messages.html
idea/Messages.css
idea/Dashboard.js
idea/assets/waving-hand.png
idea/assets/bell.png
idea/assets/status_off.png
idea/assets/profile-chat.png
idea/assets/pngegg.png
idea/assets/user.png
idea/assets/Menu.png
idea/assets/pink crocodile with hat.png
idea/assets/waving-hand3.png
idea/assets/Garnet.png
idea/assets/waving-hand2.png
idea/assets/status_on.png
idea/assets/Pearl.png
idea/assets/logo-192.png
idea/assets/waving-hand1.png
idea/assets/isaac.png
idea/assets/Amethyst.png
idea/assets/notification.png
idea/assets/group-chat.png
idea/Messages.js
idea/sw.js
.idea/Students.html
.idea/Tasks.html
.idea/Students.css
.idea/Dashboard.html
.idea/Tasks.js
.idea/Students.js
.idea/Messages.html
.idea/Dashboard.js
.idea/assets/bell.png
.idea/assets/status_off.png
.idea/assets/user.png
.idea/assets/Menu.png
.idea/assets/Garnet.png
.idea/assets/status_on.png
.idea/assets/Pearl.png
.idea/assets/Amethyst.png
.idea/assets/notification.png
.idea/Messages.js
--------------------------------------------------------------------------------

(No files listed in 'combined_web_content.txt' for Phase 1)

================================================================================
--- START OF COMBINED .js, .css, AND .html FILES (from: /Users/ihnore_ihor/WebstormProjects/PI-CMS) ---
(Excluding 'node_modules' directories)
================================================================================

================================================================================
FILE: idea_node/server.js
================================================================================

const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const mongoose = require('mongoose');
const cors = require('cors');
const axios = require('axios'); // Keep for now, might be used for other server-to-server later
const jwt = require('jsonwebtoken'); // Added

// Import Schemas
const User = require('./schemas/User');
const Chat = require('./schemas/Chat');
const Message = require('./schemas/Message');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: ["http://localhost:63342", "http://localhost:5500", "http://127.0.0.1:5500"], // Allow WebStorm, Live Server (localhost), Live Server (127.0.0.1)
        methods: ["GET", "POST"],
        credentials: true
    }
});

const PORT = process.env.PORT || 3000;
const MONGODB_URI = 'mongodb://localhost:27017'; // Replace with your MongoDB connection string

// Middleware to serve static files from the 'idea' directory (parent directory)
app.use(express.static(__dirname + '/../idea'));

const JWT_SECRET = "supersecret"; // Store this in environment variables in a real app

// Enhanced MongoDB connection with options and better error handling
mongoose.connect(MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    serverSelectionTimeoutMS: 5000, // Timeout after 5s instead of 30s
    socketTimeoutMS: 45000, // Close sockets after 45s of inactivity
})
.then(() => {
    console.log('MongoDB connected successfully.');
    // Start the server only after successful DB connection
    server.listen(PORT, () => {
        console.log(`Server running on port ${PORT}`);
    });
})
.catch(err => {
    console.error('MongoDB connection error:', err);
    console.error('Please make sure MongoDB is running on your machine.');
    process.exit(1); // Exit the process with failure
});

// Add connection event listeners for better monitoring
mongoose.connection.on('error', err => {
    console.error('MongoDB connection error:', err);
});

mongoose.connection.on('disconnected', () => {
    console.warn('MongoDB disconnected. Attempting to reconnect...');
});

mongoose.connection.on('reconnected', () => {
    console.log('MongoDB reconnected successfully.');
});

io.on('connection', (socket) => {
    let currentUserId = null;
    let currentUserMysqlId = null;

    socket.on('authenticate', async (auth) => {
        try {
            if (!auth || !auth.token) {
                return socket.emit('authentication_error', 'Invalid authentication data: token missing');
            }

            let decoded;
            try {
                decoded = jwt.verify(auth.token, JWT_SECRET);
            } catch (jwtError) {
                // Update user status to offline if token is expired
                if (jwtError.name === 'TokenExpiredError' && auth.userInfo && auth.userInfo.id) {
                    await User.findOneAndUpdate(
                        { mysql_user_id: auth.userInfo.id.toString() },
                        { 
                            online: false,
                            lastSeen: new Date()
                        }
                    );
                }
                return socket.emit('authentication_error', jwtError.message);
            }

            const mysqlId = decoded.sub;

            if (!mysqlId) {
                return socket.emit('authentication_error', 'Invalid token: Missing user ID');
            }

            const { first_name, last_name, avatar } = auth.userInfo || {};
            
            let user = await User.findOneAndUpdate(
                { mysql_user_id: mysqlId.toString() },
                {
                    $set: {
                        username: `${first_name}_${last_name}`,
                        first_name: first_name || 'Unknown',
                        last_name: last_name || 'User',
                        avatar: avatar || 'assets/user.png',
                        mysql_user_id: mysqlId.toString(),
                        socketId: socket.id,
                        online: true,
                        lastSeen: new Date()
                    }
                },
                { new: true, upsert: true }
            );

            socket.data.userId = user._id;
            socket.data.mysqlId = mysqlId;
            currentUserId = user._id;
            currentUserMysqlId = mysqlId;

            socket.join(user._id.toString());

            // Broadcast user's online status to all connected clients
            socket.broadcast.emit('userStatusChanged', {
                userId: user._id,
                mysqlId: user.mysql_user_id,
                online: true,
                lastSeen: user.lastSeen
            });

            socket.emit('authenticated', {
                userId: user._id,
                mysqlId: mysqlId,
                username: user.username,
                first_name: user.first_name,
                last_name: user.last_name,
                avatar: user.avatar
            });

        } catch (error) {
            console.error('Authentication error:', error);
            socket.emit('authentication_error', error.message);
        }
    });

    socket.on('getAllUserStatuses', async () => {
        try {
            const users = await User.find({}, 'mysql_user_id online lastSeen _id');
            socket.emit('allUserStatuses', users);
        } catch (error) {
            console.error('Error fetching user statuses:', error);
            socket.emit('error', { message: 'Failed to fetch user statuses' });
        }
    });

    socket.on('getMyChats', async () => {
        if (!currentUserId) {
            socket.emit('error', { message: 'Not authenticated' });
            return;
        }

        try {
            console.log('Fetching chats for user:', currentUserId);
            
            const user = await User.findById(currentUserId);
            if (!user) {
                console.log('User not found:', currentUserId);
                socket.emit('error', { message: 'User not found' });
                return;
            }

            const chats = await Chat.find({ participants: currentUserId })
                .populate('participants', 'username first_name last_name avatar mysql_user_id')
                .populate({
                    path: 'lastMessage',
                    populate: { path: 'senderId', select: 'username first_name last_name avatar mysql_user_id' }
                })
                .sort({ updatedAt: -1 });

            console.log('Found chats for user:', chats.length);
            
            socket.emit('myChats', chats);

            // Join all chat rooms
            chats.forEach(chat => {
                console.log('Joining chat room:', chat._id);
                socket.join(chat._id.toString());
            });
        } catch (error) {
            console.error('Error fetching chats:', error);
            socket.emit('error', { message: 'Failed to fetch chats' });
        }
    });

    socket.on('createNewChat', async (data) => {
        if (!currentUserId) {
            return socket.emit('error', { message: 'Not authenticated' });
        }

        const { participantsData, groupName } = data;

        if (!participantsData || participantsData.length < 2) {
            return socket.emit('error', { message: 'A chat requires at least two participants.' });
        }

        try {
            // Find or create users in the chat database based on MySQL ID
            const participantPromises = participantsData.map(p =>
                User.findOneAndUpdate(
                    { mysql_user_id: p.id.toString() },
                    {
                        $setOnInsert: {
                            mysql_user_id: p.id.toString(),
                            username: p.username,
                            first_name: p.first_name,
                            last_name: p.last_name,
                            avatar: p.avatar,
                            online: false // Default to offline until they connect
                        }
                    },
                    { upsert: true, new: true } // Create if not exists, and return the new doc
                )
            );

            const participantDocs = await Promise.all(participantPromises);
            const participantIds = participantDocs.map(p => p._id);
            const creatorDoc = participantDocs.find(p => p._id.equals(currentUserId));
            
            if (!creatorDoc) {
                 return socket.emit('error', { message: 'Could not identify chat creator.' });
            }

            const isGroupChat = participantIds.length > 2 || (groupName && groupName.trim() !== '');

            // For direct chats, check if one already exists to prevent duplicates
            if (!isGroupChat) {
                const existingChat = await Chat.findOne({
                    isGroupChat: false,
                    participants: { $all: participantIds, $size: 2 }
                }).populate('participants', 'username first_name last_name avatar mysql_user_id online')
                  .populate('lastMessage');
                
                if (existingChat) {
                    return socket.emit('chatAlreadyExists', existingChat);
                }
            }

            // Create new chat
            const newChat = new Chat({
                name: groupName || null,
                participants: participantIds,
                createdBy: currentUserId,
                isGroupChat: isGroupChat
            });

            await newChat.save();
            const populatedChat = await newChat.populate([
                { path: 'participants', select: 'username first_name last_name avatar mysql_user_id online' },
                { path: 'createdBy', select: 'username first_name last_name avatar mysql_user_id' }
            ]);
            
            // Notify creator immediately
            socket.emit('chatCreatedSuccessfully', populatedChat);

            // Notify other participants
            participantDocs.forEach(user => {
                if (user.socketId && user._id.toString() !== currentUserId.toString()) {
                    io.to(user.socketId).emit('newChatCreated', populatedChat);
                }
            });

        } catch (error) {
            console.error('Error creating new chat:', error);
            socket.emit('error', { message: 'Failed to create chat.' });
        }
    });

    socket.on('joinChat', async (chatId) => {
        if (!currentUserId) {
            socket.emit('error', { message: 'Not authenticated' });
            return;
        }

        try {
            const chat = await Chat.findOne({
                _id: chatId,
                participants: currentUserId
            });

            if (!chat) {
                socket.emit('error', { message: 'Chat not found or access denied' });
                return;
            }

            socket.join(chatId.toString());
            console.log(`User ${currentUserId} joined chat ${chatId}`);
        } catch (error) {
            console.error('Error joining chat:', error);
            socket.emit('error', { message: 'Failed to join chat' });
        }
    });

    socket.on('sendMessage', async ({ chatId, content }) => {
        if (!currentUserId) {
            socket.emit('error', { message: 'Not authenticated' });
            return;
        }

        try {
            // First get the current user for sender details
            const sender = await User.findById(currentUserId);
            if (!sender) {
                socket.emit('error', { message: 'Sender not found' });
                return;
            }

            const chat = await Chat.findOne({
                _id: chatId,
                participants: currentUserId
            }).populate('participants');

            if (!chat) {
                socket.emit('error', { message: 'Chat not found or access denied' });
                return;
            }

            console.log('Creating new message in chat:', chatId, 'from user:', currentUserId);

            const message = new Message({
                chatId: chatId,
                senderId: currentUserId,
                senderName: `${sender.first_name}_${sender.last_name}`,
                senderAvatar: sender.avatar || 'assets/user.png',
                content: content,
                timestamp: new Date()
            });

            console.log('Saving message:', {
                chatId: message.chatId,
                senderId: message.senderId,
                content: message.content
            });

            await message.save();

            // Update chat's last message and timestamp
            chat.lastMessage = message._id;
            chat.updatedAt = new Date();
            await chat.save();

            // Populate the message with sender details
            const populatedMessage = await Message.findById(message._id)
                .populate('senderId', 'username first_name last_name avatar mysql_user_id');

            console.log('Message saved and populated:', populatedMessage);

            // Send to all participants in the chat room
            io.to(chatId.toString()).emit('newMessage', {
                _id: message._id,
                chatId: message.chatId,
                senderId: {
                    _id: sender._id,
                    username: sender.username,
                    first_name: sender.first_name,
                    last_name: sender.last_name,
                    avatar: sender.avatar,
                    mysql_user_id: sender.mysql_user_id
                },
                senderName: message.senderName,
                senderAvatar: message.senderAvatar,
                content: message.content,
                timestamp: message.timestamp
            });

            // Send notifications to participants not in the current chat
            chat.participants.forEach(participant => {
                if (!participant._id.equals(currentUserId)) {
                    io.to(participant._id.toString()).emit('notification', {
                        message: {
                            _id: message._id,
                            chatId: message.chatId,
                            senderId: {
                                _id: sender._id,
                                username: sender.username,
                                first_name: sender.first_name,
                                last_name: sender.last_name,
                                avatar: sender.avatar,
                                mysql_user_id: sender.mysql_user_id
                            },
                            senderName: message.senderName,
                            senderAvatar: message.senderAvatar,
                            content: message.content,
                            timestamp: message.timestamp
                        },
                        chatId: chatId,
                        chatName: chat.name || `${sender.first_name} ${sender.last_name}`
                    });
                }
            });

            console.log('Message and notifications sent successfully');

        } catch (error) {
            console.error('Error sending message:', error);
            socket.emit('error', { message: 'Failed to send message: ' + error.message });
        }
    });

    socket.on('updateChat', async (data) => {
        if (!currentUserId) return socket.emit('error', { message: 'Not authenticated.' });

        try {
            const chat = await Chat.findById(data.chatId).populate('participants');
            if (!chat) return socket.emit('error', { message: 'Chat not found.' });

            // Authorization: only the creator can edit
            if (!chat.createdBy.equals(currentUserId)) {
                return socket.emit('error', { message: 'You are not authorized to edit this chat.' });
            }

            // Update name if provided
            if (data.name) {
                chat.name = data.name;
            }

            // Update participants if provided
            if (data.participants.length > 0) {
                const newParticipantUsers = await User.find({ mysql_user_id: { $in: data.participants.map(String) } });
                const newParticipantIds = newParticipantUsers.map(u => u._id);
                
                // Add creator to participants if not already included
                if (!newParticipantIds.some(id => id.equals(currentUserId))) {
                    newParticipantIds.push(currentUserId);
                }

                chat.participants = newParticipantIds;
                chat.isGroupChat = newParticipantIds.length > 2 || Boolean(data.name);
            }
            
            chat.updatedAt = new Date();
            await chat.save();
            
            const populatedChat = await Chat.findById(chat._id)
                .populate('participants', 'username first_name last_name avatar online lastSeen mysql_user_id')
                .populate('createdBy', 'username first_name last_name');

            // Notify all current and new participants
            populatedChat.participants.forEach(p => {
                io.to(p._id.toString()).emit('chatUpdated', populatedChat);
            });

        } catch (error) {
            console.error(`Error updating chat ${data.chatId}:`, error);
            socket.emit('error', { message: 'Failed to update chat.' });
        }
    });

    socket.on('getChatMessages', async (chatId) => {
        if (!currentUserId) {
            return socket.emit('error', { message: 'Not authenticated' });
        }

        try {
            // Validate the user is a participant of the chat they're requesting
            const chat = await Chat.findOne({ _id: chatId, participants: currentUserId });
            if (!chat) {
                return socket.emit('error', { message: 'Chat not found or you are not a participant.' });
            }

            const messages = await Message.find({ chatId: chatId })
                .sort({ timestamp: 'asc' })
                .populate('senderId', 'username first_name last_name avatar mysql_user_id');
            
            socket.emit('chatMessages', { chatId, messages });

        } catch (error) {
            console.error(`Error fetching messages for chat ${chatId}:`, error);
            socket.emit('error', { message: 'Failed to fetch messages.' });
        }
    });

    socket.on('disconnect', async () => {
        if (currentUserId) {
            try {
                // Update user status in MongoDB
                const user = await User.findByIdAndUpdate(currentUserId, {
                    online: false,
                    lastSeen: new Date(),
                    socketId: null // Clear the socket ID
                }, { new: true });

                if (user) {
                    // Broadcast status change to all connected clients
                    socket.broadcast.emit('userStatusChanged', {
                        userId: user._id,
                        mysqlId: user.mysql_user_id,
                        online: false,
                        lastSeen: new Date()
                    });

                    // Leave all rooms
                    const rooms = [...socket.rooms];
                    rooms.forEach(room => {
                        socket.leave(room);
                    });
                }
            } catch (error) {
                console.error('Error updating user status on disconnect:', error);
            }
        }
    });
});

// Basic route to serve the main HTML page for testing if needed directly
// app.get('/', (req, res) => {
//   res.sendFile(__dirname + '/../idea/Messages.html');
// }); 

================================================================================
FILE: idea_node/schemas/Message.js
================================================================================

const mongoose = require('mongoose');

const messageSchema = new mongoose.Schema({
    chatId: { type: mongoose.Schema.Types.ObjectId, ref: 'Chat', required: true },
    senderId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    senderName: { type: String, required: true },
    senderAvatar: { type: String },
    content: { type: String, required: true },
    timestamp: { type: Date, default: Date.now }
});

const Message = mongoose.model('Message', messageSchema);

module.exports = Message; 

================================================================================
FILE: idea_node/schemas/User.js
================================================================================

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    mysql_user_id: { type: String, unique: true, required: true, index: true },
    username: { type: String, unique: true, required: true },
    first_name: String,
    last_name: String,
    avatar: String,
    online: { type: Boolean, default: false },
    lastSeen: { type: Date, default: Date.now },
    socketId: String,
    chats: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Chat' }]
});

const User = mongoose.model('User', userSchema);

module.exports = User; 

================================================================================
FILE: idea_node/schemas/Chat.js
================================================================================

const mongoose = require('mongoose');

const chatSchema = new mongoose.Schema({
    name: { type: String }, // Optional: for group chats
    participants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    isGroupChat: { type: Boolean, default: false },
    lastMessage: { type: mongoose.Schema.Types.ObjectId, ref: 'Message' },
    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now }
});

const Chat = mongoose.model('Chat', chatSchema);

module.exports = Chat; 

================================================================================
FILE: idea/Students.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Internet Programming</title>
    <link rel="stylesheet" href="Students.css">
    <link rel="icon" type="image/png" href="assets/isaac.png">
</head>
<body>
<header>
    <div class="burgerMenu">
        <button id="menuBtn">
            <img src="assets/Menu.png" alt="Burger menu" id="menu">
        </button>
        <nav class="navbar" id="navbarBurger">
            <ul>
                <li><a href="Dashboard.html">Dashboard</a></li>
                <li><a href="Students.html"><b>Students</b></a></li>
                <li><a href="Tasks.html" >Tasks</a></li>
            </ul>
        </nav>
    </div>
    <h1><a href="Students.html" title="Students page">CMS</a></h1>
    <div class="right-header">
        <div class="notification">
            <a href="Messages.html">
                <img id="bell" src="assets/bell.png" alt="Bell">
                <img id="notification-status" src="assets/notification.png" alt="notification status">
            </a>
            <div class="dropdownNotification">
                <!-- Notifications will be populated dynamically -->
            </div>
        </div>
        <div class="profile" title="Profile">
            <div class="account-container">
                <img src="assets/user.png" alt="user" width="32" height="32">
                <h2 id="profileName"></h2>
            </div>
            <div class="dropdown">
                <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank">Profile</a>
                <a id="logout_btn">Log out</a>
            </div>
        </div>
    </div>

</header>

<aside>
    <nav class="navbar">
        <ul>
            <li><a href="Dashboard.html">Dashboard</a></li>
            <li><a href="Students.html"><b>Students</b></a></li>
            <li><a href="Tasks.html" >Tasks</a></li>
        </ul>
    </nav>
</aside>

<main>
    <div id="students">
        <h2>Students</h2>
        <button id="addStudent"><b>+</b></button>
    </div>
    <div id="table">
        <table id="tableStudents">
            <tr>
                <th>
                    <label for="idStudentMain" id="idLabel">id</label>
                    <input type="checkbox" class="checkbox" id="idStudentMain">
                </th>
                <th>Group</th>
                <th>Name</th>
                <th>Gender</th>
                <th>Birthday</th>
                <th>Status</th>
                <th>Options</th>
            </tr>
        </table>
    </div>
    <div id="pagination">
        <button id="previousPage" class="tableStudents_pagination_btn"><b>&laquo;</b></button>
        <button id="page1" class="tableStudents_pagination_btn"><b>1</b></button>
        <button id="page2" class="tableStudents_pagination_btn"><b>2</b></button>
        <button id="page3" class="tableStudents_pagination_btn"><b>3</b></button>
        <button id="nextPage" class="tableStudents_pagination_btn"><b>&raquo;</b></button>
    </div>

    <div class="modal-window" id="addEditStudent">
        <div class="modal-backdrop"></div>
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="newStudentH2">New Student</h2>
                <input type="submit" value="&times;" class="close" title="close" id="close">
            </div>
            <hr>
            <form class="modal-form" id="form">
                <div class="modal-body">
                    <div class="modal-input">
                        <label for="group">Group</label>
                        <div class="input">
                            <select id="group" name="Group" required>
                                <option value="">Select a group</option>
                                <option value="PZ-22">PZ-22</option>
                                <option value="PZ-21">PZ-21</option>
                                <option value="PZ-23">PZ-23</option>
                                <option value="PZ-24">PZ-24</option>
                                <option value="PZ-25">PZ-25</option>
                                <option value="PZ-26">PZ-26</option>
                                <option value="PZ-11">PZ-11</option>
                                <option value="PZ-12">PZ-12</option>
                                <option value="PZ-13">PZ-13</option>
                                <option value="PZ-14">PZ-14</option>
                                <option value="PZ-15">PZ-15</option>
                                <option value="PZ-16">PZ-16</option>
                                <option value="PZ-17">PZ-17</option>
                            </select>
                            <p class="errorMessage" id="errorMessageGroup">Please select group.</p>
                        </div>
                    </div>

                    <div class="modal-input">
                        <label for="firstName">First Name</label>
                        <div class="input">
                            <input type="text" id="firstName" name="FirstName" required>
                            <p class="errorMessage" id="errorMessageFirstName">Please enter valid name (A-z, А-я, 2-50 characters).</p>
                        </div>
                    </div>

                    <div class="modal-input">
                        <label for="lastName">Last Name</label>
                        <div class="input">
                            <input type="text" id="lastName" name="LastName" required>
                            <p class="errorMessage" id="errorMessageLastName">Please enter valid name (A-z, А-я, 2-50 characters).</p>
                        </div>
                    </div>

                    <div class="modal-input">
                        <label for="gender">Gender</label>
                        <div class="input">
                            <select id="gender" name="Gender" required>
                                <option value="">Select student's gender</option>
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                                <option value="Other">Other</option>
                            </select>
                            <p class="errorMessage" id="errorMessageGender">Please select gender.</p>
                        </div>
                    </div>

                    <div class="modal-input">
                        <label for="dateOfBirth">Birthday</label>
                        <div class="input">
                            <input type="date" id="dateOfBirth" name="dateOfBirth" required>
                            <p class="errorMessage" id="errorMessageDateOfBirth">Date of birth cannot be in the future.</p>
                        </div>
                    </div>
                </div>
                <hr>
                <div class="modal-footer">
                   <input type="submit" value="Cancel" id="cancel">
                   <input type="submit" value="Confirm" id="confirm">
                </div>
            </form>
        </div>
    </div>

    <div class="modal-window" id="deleteStudent">
        <div class="modal-backdrop"></div>
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="deleteStudentH2Warning">WARNING!!!</h2>
                <button class="close" id="closeDelete">&times;</button>
            </div>
            <hr>
            <div class="modal-body">
                <p id="warningMessage">Are you sure you want to delete this student?</p>
            </div>
            <hr>
            <div class="modal-footer">
                <button class="cancel" id="cancelDelete">Cancel</button>
                <button class="confirm" id="delete">Delete</button>
            </div>
        </div>
    </div>
</main>

<script src="http://localhost:3000/socket.io/socket.io.js"></script>
<script src="Students.js"></script>
<script src="auth.js"></script>
</body>
</html>


================================================================================
FILE: idea/init_sw.js
================================================================================

// const init_or_not_init = false

// if(init_or_not_init) {
//     if ('serviceWorker' in navigator) {
//         window.addEventListener('load', () => {
//             navigator.serviceWorker.register('/PI-CMS/idea/sw.js')
//                 .then(registration => {
//                     console.log('Service Worker registered:', registration);
//                 })
//                 .catch(error => {
//                     console.log('Service Worker registration failed:', error);
//                 });
//         });
//     }
// }

================================================================================
FILE: idea/index.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Document</title>
</head>
<body>
<script src="index.js"></script>
</body>
</html>

================================================================================
FILE: idea/Tasks.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Internet Programming</title>
    <link rel="stylesheet" href="Students.css">
    <link rel="icon" href="assets/isaac.png">
    <link rel="manifest" href="/PI-CMS/idea/manifest.json" />
</head>
<body>
<header>
    <div class="burgerMenu">
        <button id="menuBtn">
            <img src="assets/Menu.png" alt="Burger menu" id="menu">
        </button>
        <nav class="navbar" id="navbarBurger">
            <ul>
                <li><a href="Dashboard.html">Dashboard</a></li>
                <li><a href="Students.html">Students</a></li>
                <li><a href="Tasks.html" ><b>Tasks</b></a></li>
            </ul>
        </nav>
    </div>
    <h1><a href="Students.html" title="Students page">CMS</a></h1>
    <div class="right-header">
        <div class="notification">
            <a href="Messages.html">
                <img id="bell" src="assets/bell.png" alt="Bell">
                <img id="notification-status" src="assets/notification.png" alt="notification status">
            </a>
            <div class="dropdownNotification">
                <div class="message" id="human1">
                    <div class="humanProfile">
                        <img src="assets/Amethyst.png" alt="profile">
                        <p>Amethyst</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hi guys</p>
                    </div>
                </div>
                <div class="message" id="human2">
                    <div class="humanProfile">
                        <img src="assets/Garnet.png" alt="profile">
                        <p>Garnet</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hello</p>
                    </div>
                </div>
                <div class="message" id="human3">
                    <div class="humanProfile">
                        <img src="assets/Pearl.png" alt="profile">
                        <p>Pearl</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hi</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="profile" title="Profile">
            <div class="account-container">
                <img src="assets/user.png" alt="user" width="32" height="32">
                <h2 id="profileName">Ihor Braichenko</h2>
            </div>

            <div class="dropdown">
                <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank">Profile</a>
                <br>
                <a href="">Log out</a>
            </div>
        </div>
    </div>

</header>

<aside>
    <nav class="navbar">
        <ul>
            <li><a href="Dashboard.html">Dashboard</a></li>
            <li><a href="Students.html">Students</a></li>
            <li><a href="Tasks.html" ><b>Tasks</b></a></li>
        </ul>
    </nav>
</aside>


<main>
    <div id="students">
        <h2>Tasks</h2>
    </div>


</main>
<script src="Tasks.js"></script>
</body>
</html>


================================================================================
FILE: idea/auth.js
================================================================================

if (!isUserLoggedIn()) {
    window.location.href = "login.html";
}

function isUserLoggedIn() {
    const token = sessionStorage.getItem("auth_token");
    return token !== null;
}

function tokenExpired() {
    sessionStorage.removeItem("auth_token");
    sessionStorage.removeItem("user");
    window.location.href = "login.html";
}

================================================================================
FILE: idea/Students.css
================================================================================

* {
    box-sizing: border-box;
}

body {
    margin: 0;
}

header {
    background-color: #8c8c8c;
    color: white;
    display: flex;
    align-items: center;
}

#menuBtn {
    margin-left: 15px;
    background-color: #d6d6d6;
    border-radius: 10px;
    display: none;
}

#menu {
    height: 35px;
    width: 35px;
    cursor: pointer;
}

#navbarBurger {
    display: none;
}

h1 a {
    margin-left: 15px;
    color: white;
    text-decoration: none;
}

#bell {
    position: absolute;
    top: -16px;
    right: 0;
}

.notification {
    position: relative;
}

#notification-status {
    width: 10px;
    height: 10px;
    position: absolute;
    top: -15px;
    left: -12px;
    opacity: 0;
    transition: opacity 1s ease-in-out;
}

@keyframes skew {
    0% { transform: skew(0deg); }
    50% { transform: skew(120deg); }
    100% { transform: skew(240deg); }
}

.right-header {
    margin-left: auto;
    margin-right: 15px;
    display: flex;
    align-items: center;
    position: relative;
}

.account-container {
    display: flex;
    align-items: center;
}

.dropdown {
    display: none;
    position: absolute;
    top: 50px;
    right: 0;
    background-color: gray;
    padding: 10px 20px;
    width: 160px;
    text-align: center;
    z-index: 1000;
}

.profile:hover .dropdown {
    display: block;
}

.dropdown a {
    color: #e4e4e4;
    text-decoration: none;
    text-wrap: nowrap;
    font-size: 20px;
    padding-left: 20px;
    padding-right: 20px;
    display: block;
}

.dropdown a:hover {
    background-color: #b3b3b3;
}

.dropdownNotification img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
}

.dropdownNotification {
    display: none;
    position: absolute;
    top: 15px;
    right: 0;
    background-color: gray;
    padding: 8px;
    width: 240px;
    z-index: 1000;
}

.notification:hover .dropdownNotification {
    display: block;
}

.message {
    display: flex;
    justify-content: space-between;
    padding: 5px;
    background-color: #c5c5c5;
    color: black;
    margin: 5px;
    border-radius: 5px;
    padding-right: 0;
}

.humanProfile {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-left: 5px;
    margin-right: 5px;
    width: 30%;
}

.humanProfile p {
    margin: 0;
}

.humanMessage {
    background-color: #fafafa;
    color: black;
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 60%;
    margin-right: 5px;
    border-radius: 5px;
}

.humanMessage p {
    margin: 0;
    padding: 10px;
}

main {
    margin-left: 15px;
    margin-right: 15px;
}

aside {
    width: 20%;
    float: left;
    height: calc(100vh - 60px);
}

.navbar ul {
    list-style-type: none;
}

.navbar li {
    font-size: 24px;
}

.navbar a {
    color: black;
    text-decoration: none;
}

.navbar a:hover {
    color: #727272;
}

.navbar a:active {
    color: darkgray;
}

#students {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

#students button {
    height: 30px;
    width: 30px;
    font-size: 24px;
}

table {
    border-collapse: collapse;
    border-style: solid;
    float: left;
    width: 100%;
}

table td, table th {
    border: 1px solid black;
}

#table {
    overflow-x: scroll;
    width: 80%;
    margin-right: 15px;
}

.status-on, .status-off {
    width: 10px;
    height: 10px;
}

tr {
    text-align: center;
}

td p {
    margin: 0;
}

.idStudent, #idLabel {
    visibility: hidden;
    position: absolute;
}

#pagination {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}

#pagination button {
    margin: 5px;
}

.modal-window {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
    transform: translate(-50%, -50%);
    background-color: white;
    position: absolute;
    width: 50%;
    top: 50%;
    left: 50%;
    border: black solid 1px;
    border-radius: 5px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
}

.modal-header h2 {
    margin: 8px;
}

.close {
    width: 50%;
    margin-top: 8px;
    margin-bottom: 0;
    margin-right: 8px;
    font-size: 22px;
}

.modal-body form {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 8px;
}

.modal-input {
    display: flex;
    justify-content: space-between;
    margin: 4px;
}

.input input, .input select {
    width: 100%;
    padding: 4px;
}

.input {
    display: flex;
    flex-direction: column;
    width: 70%;
}

.errorMessage {
    color: red;
    visibility: hidden;
    font-size: 12px;
    margin: 1px;
    padding: 0;
}

.error input, .error select {
    border: 1px solid crimson;
}

.error p {
    visibility: visible;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 8px;
    margin-right: 8px;
}

#cancel {
    margin-right: 8px;
}

#cancelDelete {
    margin-right: 8px;
}

#warningMessage {
    margin: 8px;
}

#login_btn:hover {
    cursor: pointer;
}

@media screen and (max-width: 576px) {
    aside {
        display: none;
    }

    #table {
        width: 100%;
    }

    #menu {
        display: block;
    }

    #profileName {
        display: none;
    }

    .modal-input {
        flex-direction: column;
    }

    .modal-input input, .modal-input select {
        width: 100%;
        margin-bottom: 4px;
    }

    .input {
        width: 100%;
    }

    #navbarBurger {
        position: fixed;
        top: 80px;
        background-color: lightgray;
        height: calc(100vh - 80px);
        width: 100% !important;
    }

    #navbarBurger li {
        font-size: 18px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .dropdown {
        top: 30px;
        right: 0;
        left: auto;
        width: 140px;
    }

    .dropdownNotification {
        right: 0;
        left: auto;
        width: 240px;
    }
}

@media (max-width: 768px) {
    aside {
        display: none;
    }

    #table {
        width: 100%;
    }

    #menuBtn {
        display: block;
    }

    #navbarBurger {
        position: fixed;
        top: 80px;
        background-color: lightgray;
        height: calc(100vh - 80px);
        width: 200px;
    }

    #navbarBurger li {
        font-size: 24px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        padding: 15px;
    }

    .dropdown {
        top: 50px;
        right: 0;
        left: auto;
        width: 160px;
    }

    .dropdownNotification {
        right: 0;
        left: auto;
        width: 240px;
    }
}

@media (max-width: 992px) {
    .navbar li {
        font-size: 18px;
    }
}

================================================================================
FILE: idea/index.js
================================================================================

window.location.href = "Students.html";

================================================================================
FILE: idea/login.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login CMS</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="Students.css">
    <link rel="icon" type="image/png" href="assets/pink crocodile with hat.png">
</head>
<body>
<header>
    <h1><a title="Students page">CMS</a></h1>
    <div class="right-header">
        <div class="profile" title="Profile">
            <h2 id="login_btn">Login</h2>
        </div>
    </div>
</header>

<main>
    <div class="modal-window" id="login-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Login</h2>
                <button class="close" id="closeLogin">&times;</button>
            </div>
            <hr>
            <form class="modal-form" id="form">
                <div class="modal-body">
                    <div class="modal-input">
                        <label for="username">Username</label>
                        <div class="input">
                            <input type="text" id="username" name="username" required>
                        </div>
                    </div>
                    <div class="modal-input">
                        <label for="password">Password</label>
                        <div class="input">
                            <input type="text" id="password" name="password" required>
                        </div>
                    </div>
                </div>
            <hr>
            <div class="modal-footer">
                <input type="submit" value="Cancel" id="cancel">
                <input type="submit" value="Confirm" id="confirm">
            </div>
            </form>
        </div>
    </div>
</main>
<script src="login.js"></script>
</body>
</html>

================================================================================
FILE: idea/Dashboard.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Internet Programming</title>
    <link rel="stylesheet" href="Students.css">
    <link rel="icon" href="assets/isaac.png">
    <link rel="manifest" href="/idea/manifest.json" />
</head>
<body>
<header>
    <div class="burgerMenu">
        <button id="menuBtn">
            <img src="assets/Menu.png" alt="Burger menu" id="menu">
        </button>
        <nav class="navbar" id="navbarBurger">
            <ul>
                <li><a href="Dashboard.html"><b>Dashboard</b></a></li>
                <li><a href="Students.html">Students</a></li>
                <li><a href="Tasks.html" >Tasks</a></li>
            </ul>
        </nav>
    </div>
    <h1><a href="Students.html" title="Students page">CMS</a></h1>
    <div class="right-header">
        <div class="notification">
            <a href="Messages.html">
                <img id="bell" src="assets/bell.png" alt="Bell">
                <img id="notification-status" src="assets/notification.png" alt="notification status">
            </a>
            <div class="dropdownNotification">
                <div class="message" id="human1">
                    <div class="humanProfile">
                        <img src="assets/Amethyst.png" alt="profile">
                        <p>Amethyst</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hi guys</p>
                    </div>
                </div>
                <div class="message" id="human2">
                    <div class="humanProfile">
                        <img src="assets/Garnet.png" alt="profile">
                        <p>Garnet</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hello</p>
                    </div>
                </div>
                <div class="message" id="human3">
                    <div class="humanProfile">
                        <img src="assets/Pearl.png" alt="profile">
                        <p>Pearl</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hi</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="profile" title="Profile">
            <div class="account-container">
                <img src="assets/user.png" alt="user" width="32" height="32">
                <h2 id="profileName">Ihor Braichenko</h2>
            </div>

            <div class="dropdown">
                <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank">Profile</a>
                <br>
                <a href="">Log out</a>
            </div>
        </div>
    </div>

</header>

<aside>
    <nav class="navbar">
        <ul>
            <li><a href="Dashboard.html"><b>Dashboard</b></a></li>
            <li><a href="Students.html">Students</a></li>
            <li><a href="Tasks.html" >Tasks</a></li>
        </ul>
    </nav>
</aside>


<main>

</main>
<script src="Dashboard.js"></script>
</body>
</html>


================================================================================
FILE: idea/Tasks.js
================================================================================

document.getElementById("menuBtn").addEventListener("click", () => {
    const menu = document.getElementById("navbarBurger");
    if (menu.style.display === "block") {
        menu.style.display = "none";
    } else {
        menu.style.display = "block";
    }
})

================================================================================
FILE: idea/Students.js
================================================================================

const table = document.getElementById("tableStudents");
const paginationContainer = document.getElementById("pagination");

let studentsList = [];
let page = 1;
const studentsPerPage = 5;

let selectedRows = [];
let studentToEdit;

let isValid = [false, false, false, false, false]; // For group, firstName, lastName, gender, dateOfBirth

const BASE_API_URL = 'http://localhost:8888';

const validationPatterns = {
    name: /^[A-Za-zА-Яа-я'\-]{2,50}$/,
    date: /^\d{4}-\d{2}-\d{2}$/,
};

const JWT_TOKEN_KEY = "auth_token";
const SOCKET_SERVER = "http://localhost:3000";

// Initialize socket with auto-connect disabled
const socket = io(SOCKET_SERVER, {
    autoConnect: false,
    reconnection: true,
    reconnectionAttempts: 5,
    reconnectionDelay: 1000
});

function tokenExpired() {
    sessionStorage.removeItem("auth_token");
    sessionStorage.removeItem("user");
    window.location.href = "/PI-Labs/auth/login.html";
}

async function logoutUser() {
    const token = sessionStorage.getItem("auth_token");
    if (!token) window.location.href = "login.html";

    try {
        await fetch(`${BASE_API_URL}/auth/logout`, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
            },
        });

        sessionStorage.removeItem("auth_token");
        sessionStorage.removeItem("user");
        window.location.href = "login.html";
    } catch (error) {
        console.error("Logout error:", error);
    }
}

async function fetchStudents(page) {
    try {
        const token = sessionStorage.getItem("auth_token");
        console.log(token);
        if (!token) {
            window.location.href = "login.html";
            return { total: 0, perPage: studentsPerPage };
        }

        const response = await fetch(`${BASE_API_URL}/students/?page=${page}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
        });
        if (response.status === 401) {
            tokenExpired();
            return { total: 0, perPage: studentsPerPage };
        }
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const data = await response.json();
        if (!data.success) throw new Error(data.error || 'Failed to fetch students');
        studentsList = data.students;
        return { total: data.total, perPage: data.perPage };
    } catch (error) {
        console.error("Error fetching students:", error);
        alert("Failed to fetch students: " + error.message);
        return { total: 0, perPage: studentsPerPage };
    }
}

function displayStudents() {
    table.innerHTML = `
        <tr>
            <th>
                <label for="idStudentMain" id="idLabel">id</label>
                <input type="checkbox" class="checkbox" id="idStudentMain">
            </th>
            <th>Group</th>
            <th>Name</th>
            <th>Gender</th>
            <th>Birthday</th>
            <th>Status</th>
            <th>Options</th>
        </tr>
    `;

    studentsList.forEach((student, index) => {
        const row = document.createElement("tr");
        row.classList.add("Students");
        row.innerHTML = `
            <td>
                <label for="${index}" class="idStudent" style="visibility: hidden;">${student.id}</label>
                <input type="checkbox" class="checkbox" id="${index}" value="${student.id}">
            </td>
            <td><p>${student.group_name}</p></td>
            <td><p>${student.first_name} ${student.last_name}</p></td>
            <td><p>${student.gender}</p></td>
            <td><p>${student.date_of_birth}</p></td>
            <td>
                <img class="${student.status ? 'status-on' : 'status-off'}" 
                     src="assets/${student.status ? 'status_on.png' : 'status_off.png'}" 
                     alt="Status"/>
            </td>
            <td>
                <button id="optionsEdit">edit</button>
                <button id="optionsDelete">delete</button>
            </td>
        `;
        table.appendChild(row);
    });

    attachRowListeners();
}

function updatePagination(total) {
    const totalPages = Math.ceil(total / studentsPerPage);
    page = Math.max(1, Math.min(page, totalPages));

    paginationContainer.innerHTML = `
        <button id="previousPage" class="tableStudents_pagination_btn" ${page === 1 ? "disabled" : ""} data-page="${page - 1}"><b>«</b></button>
    `;

    for (let i = 1; i <= totalPages; i++) {
        paginationContainer.innerHTML += `
            <button id="page${i}" class="tableStudents_pagination_btn" ${i === page ? "disabled" : ""} data-page="${i}"><b>${i}</b></button>
        `;
    }

    paginationContainer.innerHTML += `
        <button id="nextPage" class="tableStudents_pagination_btn" ${page === totalPages ? "disabled" : ""} data-page="${page + 1}"><b>»</b></button>
    `;

    document.querySelectorAll(".tableStudents_pagination_btn").forEach((btn) => {
        btn.addEventListener("click", () => {
            const newPage = parseInt(btn.getAttribute("data-page"));
            if (!isNaN(newPage)) {
                page = newPage;
                updateTable();
            }
        });
    });
}

async function updateTable() {
    const { total } = await fetchStudents(page);
    displayStudents();
    updatePagination(total);
}

function attachRowListeners() {
    const selectAll = document.getElementById("idStudentMain");
    if (selectAll) {
        selectAll.addEventListener("change", (e) => {
            document.querySelectorAll(".checkbox").forEach((checkbox) => {
                checkbox.checked = e.target.checked;
            });
        });
    }

    document.querySelectorAll(".checkbox").forEach((checkbox) => {
        checkbox.addEventListener("change", (e) => {
            if (!e.target.checked) {
                document.getElementById("idStudentMain").checked = false;
            } else if (
                Array.from(document.querySelectorAll(".checkbox")).every((c) => c.checked)
            ) {
                document.getElementById("idStudentMain").checked = true;
            }
        });
    });

    document.querySelectorAll("#optionsEdit").forEach((btn) => {
        btn.addEventListener("click", (e) => {
            const row = e.target.closest("tr");
            const checkbox = row.querySelector(".checkbox");
            if (!checkbox.checked) return;
            const id = parseInt(row.querySelector(".idStudent").textContent);
            const student = studentsList.find(s => s.id === id);
            studentToEdit = student;
            document.getElementById("newStudentH2").textContent = "Edit Student";
            const groupInput = document.getElementById("group");
            const firstNameInput = document.getElementById("firstName");
            const lastNameInput = document.getElementById("lastName");
            const genderInput = document.getElementById("gender");
            const birthdayInput = document.getElementById("dateOfBirth");
            if (groupInput) groupInput.value = student.group_name;
            if (firstNameInput) firstNameInput.value = student.first_name;
            if (lastNameInput) lastNameInput.value = student.last_name;
            if (genderInput) genderInput.value = student.gender;
            if (birthdayInput) birthdayInput.value = student.date_of_birth;
            clearErrors();
            document.getElementById("addEditStudent").style.display = "block";
        });
    });

    document.querySelectorAll("#optionsDelete").forEach((btn) => {
        btn.addEventListener("click", (e) => {
            const row = e.target.closest("tr");
            const checkbox = row.querySelector(".checkbox");
            if (!checkbox.checked) return;
            selectedRows = Array.from(
                document.querySelectorAll(".checkbox:checked")
            ).map((c) => c.closest("tr"));
            const message =
                selectedRows.length > 1
                    ? "Are you sure you want to delete those students?"
                    : `Are you sure you want to delete ${selectedRows[0].querySelector("td:nth-child(3) p").textContent}?`;
            document.getElementById("warningMessage").textContent = message;
            document.getElementById("deleteStudent").style.display = "block";
        });
    });
}

function clearErrors() {
    const inputs = ['group', 'firstName', 'lastName', 'gender', 'dateOfBirth'];
    inputs.forEach((id) => {
        const element = document.getElementById(id);
        if (element) {
            const container = element.parentElement;
            container.classList.remove('error');
            const errorMessage = container.querySelector('.errorMessage');
            if (errorMessage) errorMessage.textContent = '';
        } else {
            console.warn(`Element with ID ${id} not found in DOM`);
        }
    });
}

function initializePresenceSocket() {
    const token = sessionStorage.getItem("auth_token");
    if (token) {
        const socket = io("http://localhost:3000", {
            auth: { token },
            autoConnect: true
        });
        socket.on('connect', () => {
            console.log('User presence announced from Students page.');
        });
    }
}

function updateStudentStatusInTable(mysqlUserId, online) {
    const rows = document.querySelectorAll(`tr.Students`);
    rows.forEach(row => {
        const idElement = row.querySelector("td:first-child .idStudent");
        if (idElement && idElement.textContent === mysqlUserId.toString()) {
            const statusImg = row.querySelector("td:nth-child(6) img");
            if (statusImg) {
                statusImg.className = online ? 'status-on' : 'status-off';
                statusImg.src = `assets/${online ? 'status_on.png' : 'status_off.png'}`;
            }
        }
    });
}

function initializeSocketForStudents() {
    const token = sessionStorage.getItem("auth_token");
    if (!token) return;

    const socket = io("http://localhost:3000", {
        auth: { token }
    });

    socket.on('connect', () => {
        console.log('Socket connected for student status updates. Requesting all statuses.');
        socket.emit('getAllUserStatuses');
    });

    socket.on('allUserStatuses', (users) => {
        if (Array.isArray(users)) {
            const statusMap = new Map(users.map(u => [u.mysql_user_id, u.online]));
            const allRows = document.querySelectorAll('tr.Students');
            allRows.forEach(row => {
                const id = row.querySelector(".idStudent").textContent;
                const isOnline = statusMap.get(id) || false;
                const statusImg = row.querySelector("td:nth-child(6) img");
                if (statusImg) {
                    statusImg.className = isOnline ? 'status-on' : 'status-off';
                    statusImg.src = `assets/${isOnline ? 'status_on.png' : 'status_off.png'}`;
                }
            });
        }
    });

    socket.on('userStatusChanged', ({ mysqlUserId, online }) => {
        updateStudentStatusInTable(mysqlUserId, online);
    });
    
    socket.on('connect_error', (err) => {
        console.error("Socket connection error on students page:", err.message);
    });
}

// Function to handle page unload (tab close or refresh)
function handlePageUnload(event) {
    const token = sessionStorage.getItem("auth_token");
    if (!token) return;

    // Use sendBeacon for more reliable delivery during page unload
    navigator.sendBeacon(`${BASE_API_URL}/auth/logout`, JSON.stringify({
        token: token
    }));
    
    // Clear session storage
    sessionStorage.removeItem("auth_token");
    sessionStorage.removeItem("user");
}

// Function to show message notification
function showMessageNotification(message) {
    // Show notification dot and animate bell for new messages
    const notificationStatus = document.getElementById('notification-status');
    const bell = document.getElementById('bell');
    
    if (notificationStatus) {
        notificationStatus.classList.add('show');
    }
    
    if (bell) {
        // Remove any existing animation
        bell.style.animation = 'none';
        // Trigger reflow
        bell.offsetHeight;
        // Start new animation
        bell.style.animation = 'skew 3s 1';
    }

    // Update dropdown notification if exists
    const dropdownNotification = document.querySelector('.dropdownNotification');
    if (dropdownNotification) {
        // Check if notification for this message already exists
        const existingNotification = dropdownNotification.querySelector(`[data-message-id="${message._id}"]`);
        if (existingNotification) {
            return; // Skip if notification already exists
        }

        const notificationElement = document.createElement('div');
        notificationElement.className = 'message notification-item unread';  // Add unread class
        notificationElement.dataset.chatId = message.chatId;
        notificationElement.dataset.messageId = message._id;
        notificationElement.innerHTML = `
            <div class="humanProfile">
                <img src="${message.senderId.avatar || 'assets/user.png'}" alt="profile">
                <p>${message.senderId.first_name} ${message.senderId.last_name}</p>
            </div>
            <div class="humanMessage">
                <p>${message.content}</p>
                <span class="message-timestamp">${new Date(message.timestamp).toLocaleTimeString()}</span>
            </div>
        `;
        
        // Add click handler to navigate to the chat
        notificationElement.addEventListener('click', () => {
            // Store the chat ID and redirect to Messages page
            sessionStorage.setItem('pending_chat_id', message.chatId);
            window.location.href = 'Messages.html';
        });
        
        // Add at the top
        if (dropdownNotification.firstChild) {
            dropdownNotification.insertBefore(notificationElement, dropdownNotification.firstChild);
        } else {
            dropdownNotification.appendChild(notificationElement);
        }

        // Limit the number of notifications shown (keep last 10)
        const notifications = dropdownNotification.querySelectorAll('.notification-item');
        if (notifications.length > 10) {
            for (let i = 10; i < notifications.length; i++) {
                notifications[i].remove();
            }
        }
    }
}

// Function to setup socket events
function setupSocketEvents() {
    socket.on('connect', () => {
        console.log('Socket connected:', socket.id);
        if (!socket.auth) {
            // Send authentication only if not already authenticated
            socket.emit('authenticate', socket.auth);
        }
    });

    socket.on('authenticated', (data) => {
        console.log('Successfully authenticated with chat server:', data);
    });

    socket.on('authentication_error', (error) => {
        console.error('Chat authentication failed:', error);
        if (error.includes('jwt expired') || error.includes('invalid token')) {
            sessionStorage.removeItem("auth_token");
            sessionStorage.removeItem("user");
            window.location.href = "login.html";
        }
    });

    socket.on('notification', (data) => {
        console.log('Received notification:', data);
        showMessageNotification(data.message);
    });

    socket.on('connect_error', (error) => {
        console.error('Socket connection error:', error);
    });
}

document.addEventListener("DOMContentLoaded", () => {
    // Set up user display and logout
    const user = JSON.parse(sessionStorage.getItem("user"));
    if (user) {
        const profileUsername = document.getElementById("profileName");
        if (profileUsername) {
            profileUsername.textContent = `${user.first_name} ${user.last_name}`;
        } else {
            console.warn("Element with ID 'profileName' not found in DOM");
        }

        // Initialize socket connection with authentication
        const jwtToken = sessionStorage.getItem(JWT_TOKEN_KEY);
        if (jwtToken) {
            socket.auth = {
                token: jwtToken,
                userInfo: {
                    id: user.id || user.mysql_user_id,
                    first_name: user.first_name,
                    last_name: user.last_name,
                    avatar: user.avatar || 'assets/profile-chat.png'
                }
            };
            socket.connect();
            setupSocketEvents();
        }
    } else {
        window.location.href = "login.html";
    }

    // Set up logout button
    const logoutBtn = document.getElementById("logout_btn");
    if (logoutBtn) {
        logoutBtn.addEventListener("click", logoutUser);
    } else {
        console.warn("Element with ID 'logout_btn' not found in DOM");
    }

    // Notification animation
    const bell = document.getElementById("bell");
    if (bell) bell.style.animation = "skew 3s 1";
    setTimeout(() => {
        const notificationStatus = document.getElementById("notification-status");
        if (notificationStatus) notificationStatus.style.opacity = "100%";
    }, 900);

    // Burger menu toggle
    const menuBtn = document.getElementById("menuBtn");
    if (menuBtn) {
        menuBtn.addEventListener("click", () => {
            const menu = document.getElementById("navbarBurger");
            if (menu) {
                menu.style.display = menu.style.display === "block" ? "none" : "block";
            }
        });
    }

    // Window resize handler
    window.addEventListener("resize", () => {
        const navbarBurger = document.getElementById("navbarBurger");
        if (navbarBurger && window.innerWidth > 768) {
            navbarBurger.style.display = "none";
        }
    });

    // Check if form inputs exist
    const groupInput = document.getElementById("group");
    const firstNameInput = document.getElementById("firstName");
    const lastNameInput = document.getElementById("lastName");
    const genderInput = document.getElementById("gender");
    const birthdayInput = document.getElementById("dateOfBirth");

    const missingInputs = [];
    if (!groupInput) missingInputs.push("group");
    if (!firstNameInput) missingInputs.push("firstName");
    if (!lastNameInput) missingInputs.push("lastName");
    if (!genderInput) missingInputs.push("gender");
    if (!birthdayInput) missingInputs.push("dateOfBirth");

    if (missingInputs.length > 0) {
        console.error(`Missing form inputs: ${missingInputs.join(", ")}. Please check index.html IDs.`);
        return;
    }

    updateTable();

    document.querySelectorAll(".modal-backdrop").forEach((backdrop) => {
        backdrop.addEventListener("click", (e) => {
            const modal = e.target.closest(".modal-window");
            if (modal) modal.style.display = "none";
        });
    });

    const deleteBtn = document.getElementById("delete");
    if (deleteBtn) {
        deleteBtn.addEventListener("click", async () => {
            const token = sessionStorage.getItem("auth_token");
            const ids = selectedRows.map(
                (row) => parseInt(row.querySelector(".idStudent").textContent)
            );
            try {
                const deletePromises = ids.map(id =>
                    fetch(`${BASE_API_URL}/students/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                    }).then(async response => {
                        if (response.status === 401) {
                            tokenExpired();
                            return { success: false, error: 'Unauthorized' };
                        }
                        if (!response.ok) {
                            throw new Error(`HTTP ${response.status}`);
                        }
                        try {
                            const result = await response.json();
                            return result || { success: true };
                        } catch (jsonError) {
                            console.warn(`JSON parsing failed for DELETE /students/${id}:`, jsonError);
                            return { success: true };
                        }
                    })
                );
                const results = await Promise.all(deletePromises);
                const failed = results.find(result => result && !result.success);
                if (failed) {
                    alert(failed.error || 'Failed to delete one or more students');
                } else {
                    updateTable();
                    selectedRows = [];
                    document.getElementById("deleteStudent").style.display = "none";
                }
            } catch (error) {
                console.error("Error deleting students:", error);
                alert("Failed to delete students: " + error.message);
            }
        });
    }

    const cancelDeleteBtn = document.getElementById("cancelDelete");
    if (cancelDeleteBtn) {
        cancelDeleteBtn.addEventListener("click", () => {
            document.getElementById("deleteStudent").style.display = "none";
        });
    }

    const closeDeleteBtn = document.getElementById("closeDelete");
    if (closeDeleteBtn) {
        closeDeleteBtn.addEventListener("click", () => {
            document.getElementById("deleteStudent").style.display = "none";
        });
    }

    const addStudentBtn = document.getElementById("addStudent");
    if (addStudentBtn) {
        addStudentBtn.addEventListener("click", () => {
            document.querySelectorAll(".input").forEach((c) => c.classList.remove("error"));
            const form = document.getElementById("form");
            if (form) form.reset();
            document.getElementById("newStudentH2").textContent = "New Student";
            clearErrors();
            studentToEdit = null;
            document.getElementById("addEditStudent").style.display = "block";
        });
    }

    groupInput.addEventListener("change", (e) => {
        isValid[0] = e.target.value !== "";
        e.target.parentElement.classList.toggle("error", !isValid[0]);
        e.target.parentElement.querySelector(".errorMessage").textContent = isValid[0] ? "" : "Please select group.";
    });

    firstNameInput.addEventListener("change", (e) => {
        isValid[1] = validationPatterns.name.test(e.target.value);
        e.target.parentElement.classList.toggle("error", !isValid[1]);
        e.target.parentElement.querySelector(".errorMessage").textContent = isValid[1] ? "" : "Please enter valid name (A-z, А-я, 2-50 characters).";
    });

    lastNameInput.addEventListener("change", (e) => {
        isValid[2] = validationPatterns.name.test(e.target.value);
        e.target.parentElement.classList.toggle("error", !isValid[2]);
        e.target.parentElement.querySelector(".errorMessage").textContent = isValid[2] ? "" : "Please enter valid name (A-z, А-я, 2-50 characters).";
    });

    genderInput.addEventListener("change", (e) => {
        isValid[3] = e.target.value !== "";
        e.target.parentElement.classList.toggle("error", !isValid[3]);
        e.target.parentElement.querySelector(".errorMessage").textContent = isValid[3] ? "" : "Please select gender.";
    });

    birthdayInput.addEventListener("change", (e) => {
        isValid[4] = false;
        e.target.parentElement.classList.add("error");
        if (e.target.value && validationPatterns.date.test(e.target.value)) {
            const birthDate = new Date(e.target.value);
            const today = new Date();
            if (birthDate < today) {
                isValid[4] = true;
                e.target.parentElement.classList.remove("error");
                e.target.parentElement.querySelector(".errorMessage").textContent = "";
            } else {
                e.target.parentElement.querySelector(".errorMessage").textContent = "Date of birth cannot be in the future.";
            }
        } else {
            e.target.parentElement.querySelector(".errorMessage").textContent = "Valid date is required.";
        }
    });

    const form = document.getElementById("form");
    if (form) {
        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            if (e.submitter !== document.getElementById("confirm")) return;

            const event = new Event("change");
            groupInput.dispatchEvent(event);
            firstNameInput.dispatchEvent(event);
            lastNameInput.dispatchEvent(event);
            genderInput.dispatchEvent(event);
            birthdayInput.dispatchEvent(event);

            if (!isValid.every((item) => item)) return;
            isValid = [false, false, false, false, false];

            const studentData = {
                group_name: groupInput.value,
                first_name: firstNameInput.value,
                last_name: lastNameInput.value,
                gender: genderInput.value,
                date_of_birth: birthdayInput.value,
            };

            try {
                const token = sessionStorage.getItem("auth_token");
                const method = studentToEdit ? "PUT" : "POST";
                const url = studentToEdit ? `${BASE_API_URL}/students/${studentToEdit.id}` : `${BASE_API_URL}/students/`;
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(studentData),
                });
                if (response.status === 401) {
                    tokenExpired();
                    return;
                }
                const result = await response.json();
                console.log('Backend response:', result); // Debug: Log full response
                if (result.success) {
                    updateTable();
                    document.getElementById("addEditStudent").style.display = "none";
                    studentToEdit = null;
                } else {
                    if (result.errors) {
                        console.log('Errors received:', result.errors);
                        let hasFieldErrors = false;
                        Object.keys(result.errors).forEach((key) => {
                            const inputId = {
                                group_name: 'group',
                                first_name: 'firstName',
                                last_name: 'lastName',
                                gender: 'gender',
                                date_of_birth: 'dateOfBirth'
                            }[key];
                            if (inputId) {
                                const container = document.getElementById(inputId)?.parentElement;
                                if (container) {
                                    hasFieldErrors = true;
                                    container.classList.add('error');
                                    container.querySelector('.errorMessage').textContent = result.errors[key];
                                }
                            }
                        });
                        if (!hasFieldErrors) {
                            const errorMessages = Object.values(result.errors).join('; ');
                            alert(errorMessages || 'Failed to save student');
                        }
                    } else {
                        alert(result.error || 'Failed to save student');
                    }
                }
            } catch (error) {
                console.error("Error saving student:", error);
                alert("Failed to save student: " + error.message);
            }
        });
    }

    const cancelBtn = document.getElementById("cancel");
    if (cancelBtn) {
        cancelBtn.addEventListener("click", () => {
            document.getElementById("addEditStudent").style.display = "none";
            clearErrors();
            studentToEdit = null;
        });
    }

    const closeBtn = document.getElementById("close");
    if (closeBtn) {
        closeBtn.addEventListener("click", () => {
            document.getElementById("addEditStudent").style.display = "none";
            clearErrors();
            studentToEdit = null;
        });
    }

    // Set up notification handling
    const notification = document.querySelector('.notification');
    const notificationStatus = document.getElementById('notification-status');
    const dropdownNotification = document.querySelector('.dropdownNotification');

    if (notification && notificationStatus && dropdownNotification) {
        // Clear any existing notifications on page load
        dropdownNotification.innerHTML = '';

        notification.addEventListener('mouseenter', () => {
            // Hide the red dot when viewing notifications
            notificationStatus.classList.remove('show');
            dropdownNotification.style.display = 'block';
            
            // Mark all current notifications as read
            const notifications = dropdownNotification.querySelectorAll('.notification-item');
            notifications.forEach(notif => {
                notif.classList.add('read');
            });
        });

        notification.addEventListener('mouseleave', () => {
            dropdownNotification.style.display = 'none';
            // Don't show the red dot after viewing notifications
            // It will only show again when new messages arrive
        });
    }
});

================================================================================
FILE: idea/login.js
================================================================================

const BASE_API_URL = 'http://localhost:8888';
function isUserLoggedIn() {
    const token = sessionStorage.getItem('auth_token');
    const user = sessionStorage.getItem('user');
    return token !== null && user !== null;
}

async function loginUser(username, password) {
    try {
        const response = await fetch('http://localhost:8888/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password })
        });

        const data = await response.json();
        console.log('Login response:', data);

        if (data.message === "Login successful" && data.token) {
            // Store auth token and user data
            sessionStorage.setItem('auth_token', data.token);
            sessionStorage.setItem('user', JSON.stringify(data.user));

            // Update user status to online
            try {
                await fetch('http://localhost:8888/students/update-status', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${data.token}`
                    },
                    body: JSON.stringify({ status: true })
                });
            } catch (statusError) {
                console.error('Error updating status:', statusError);
            }

            return { success: true };
        } else {
            return { success: false, error: data.message || 'Login failed' };
        }
    } catch (error) {
        console.error('Login error:', error);
        return { success: false, error: 'Network error occurred' };
    }
}

document.addEventListener("DOMContentLoaded", () => {
    console.log("Login loaded");
    // Check if user is already logged in
    if (isUserLoggedIn()) {
        window.location.href = "Students.html";
        return;
    }

    // Modal open/close handlers
    const loginBtn = document.getElementById("login_btn");
    const cancelBtn = document.getElementById("cancel");
    const closeLoginBtn = document.getElementById("closeLogin");
    const loginModal = document.getElementById("login-modal");

    if (loginBtn) {
        loginBtn.addEventListener("click", (e) => {
            e.preventDefault();
            loginModal.style.display = "block";
        });
    }

    if (cancelBtn) {
        cancelBtn.addEventListener("click", (e) => {
            e.preventDefault();
            loginModal.style.display = "none";
        });
    }

    if (closeLoginBtn) {
        closeLoginBtn.addEventListener("click", (e) => {
            e.preventDefault();
            loginModal.style.display = "none";
        });
    }

    // Form submission handler
    const form = document.getElementById("form");
    const usernameInput = document.getElementById("username");
    const passwordInput = document.getElementById("password");

    if (form) {
        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            if (e.submitter !== document.getElementById("confirm")) return;

            const username = usernameInput.value;
            const password = passwordInput.value;

            const result = await loginUser(username, password);

            if (result.success) {
                loginModal.style.display = "none";
                window.location.href = "Students.html";
            } else {
                alert(result.error || "Login failed. Please try again.");
            }
        });
    }
});

================================================================================
FILE: idea/Messages.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Messages - CMS</title>
  <link rel="stylesheet" href="Students.css"> <!-- Common styles -->
  <link rel="stylesheet" href="Messages.css"> <!-- Specific styles for Messages -->
  <link rel="icon" type="image/png" href="assets/isaac.png">
</head>
<body>
<header>
  <div class="burgerMenu">
    <button id="menuBtn">
      <img src="assets/Menu.png" alt="Burger menu" id="menu">
    </button>
    <nav class="navbar" id="navbarBurger">
      <ul>
        <li><a href="Dashboard.html">Dashboard</a></li>
        <li><a href="Students.html">Students</a></li>
        <li><a href="Tasks.html">Tasks</a></li>
        <li><a href="Messages.html"><b>Messages</b></a></li>
      </ul>
    </nav>
  </div>
  <h1><a href="Dashboard.html" title="Dashboard">CMS</a></h1>
  <div class="right-header">
    <div class="notification">
      <a href="Messages.html">
        <img id="bell" src="assets/bell.png" alt="Bell">
        <img id="notification-status" src="assets/notification.png" alt="notification status">
      </a>
      <div class="dropdownNotification">
        <!-- Notifications will be populated dynamically -->
      </div>
    </div>
    <div class="profile" title="Profile">
      <div class="account-container">
        <img src="assets/user.png" alt="user" width="32" height="32" id="profileUserImage">
        <h2 id="profileName"></h2>
      </div>
      <div class="dropdown">
        <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank">Profile</a>
        <a id="logout_btn">Log out</a>
      </div>
    </div>
  </div>
</header>

<aside>
  <nav class="navbar">
    <ul>
      <li><a href="Dashboard.html">Dashboard</a></li>
      <li><a href="Students.html">Students</a></li>
      <li><a href="Tasks.html">Tasks</a></li>
      <li><a href="Messages.html"><b>Messages</b></a></li>
    </ul>
  </nav>
</aside>

<main class="messages-container">
  <div class="chat-sidebar">
    <div class="chat-header">
      <h2>Chats</h2>
      <button id="createNewChatBtn" title="Create New Chat" disabled>+</button>
    </div>
    <div class="chat-list" id="chatList">
      <!-- Chat list will be populated dynamically -->
    </div>
  </div>

  <div class="messages-main-container">
    <div class="chat-info" id="chatInfo" style="display: none;">
      <div class="chat-title">
        <h3 id="currentChatName"></h3>
        <button id="editChatBtn" title="Edit Chat" style="display: none;">Edit</button>
      </div>
      <div class="chat-participants" id="currentChatParticipants">
        <!-- Participants will be shown here -->
      </div>
    </div>
    <div class="message-list" id="messageList" style="display: none;">
      <!-- Messages will be populated dynamically -->
    </div>
    <div class="chat-welcome-screen" id="chatWelcomeScreen">
      <div class="welcome-content">
        <img src="assets/waving-hand.png" alt="Hello" class="welcome-icon">
        <h2>Select a chat to start messaging</h2>
        <p>Choose from an existing conversation or start a new one.</p>
      </div>
    </div>
    <div class="message-input-container" id="messageInputContainer" style="display: none;">
      <input type="text" id="messageInput" placeholder="Type a message..." disabled>
      <button id="sendMessageBtn" disabled>Send</button>
    </div>
  </div>
</main>

<!-- Modal for Creating New Chat -->
<div class="modal-window" id="newChatModal">
    <div class="modal-backdrop"></div>
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Create New Chat</h2>
            <button class="close" id="closeNewChatModal" title="Close">&times;</button>
        </div>
        <hr>
        <form class="modal-form" id="newChatForm">
            <div class="modal-body">
                <div class="modal-input">
                    <label for="chatNameInput">Group Name (Optional)</label>
                    <div class="input">
                        <input type="text" id="chatNameInput" name="chatName" placeholder="e.g., Project Alpha Team">
                    </div>
                </div>
                <div class="modal-input">
                    <label for="userSearchInput">Select Users</label>
                    <div class="input">
                        <input type="text" id="userSearchInput" placeholder="Search students..." class="user-search-input-messages">
                        <div id="userListForNewChat" class="user-selection-list">
                            <!-- User items will be populated dynamically -->
                        </div>
                        <p class="errorMessage" id="errorMessageUsers">Please select at least one user.</p>
                    </div>
                </div>
            </div>
            <hr>
            <div class="modal-footer">
                <input type="button" value="Cancel" id="cancelNewChat" class="modal-button-cancel">
                <input type="submit" value="Create Chat" id="confirmNewChat" class="modal-button-confirm">
            </div>
        </form>
    </div>
</div>

<!-- Modal for Adding User to Chat -->
<div class="modal-window" id="addUserModal">
    <div class="modal-backdrop"></div>
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Add User to Chat</h2>
            <button class="close" id="closeAddUserModal" title="Close">&times;</button>
        </div>
        <hr>
        <form class="modal-form" id="addUserForm">
            <div class="modal-body">
                <div class="modal-input">
                    <label for="userSearchInputForAdd">Select Users</label>
                    <div class="input">
                        <input type="text" id="userSearchInputForAdd" placeholder="Search students..." class="user-search-input-messages">
                        <div id="userListForAddUser" class="user-selection-list">
                            <!-- User items will be populated dynamically -->
                        </div>
                        <p class="errorMessage" id="errorMessageUsersToAdd">Please select at least one user.</p>
                    </div>
                </div>
            </div>
            <hr>
            <div class="modal-footer">
                <input type="button" value="Cancel" id="cancelAddUser" class="modal-button-cancel">
                <input type="submit" value="Add User(s)" id="confirmAddUser" class="modal-button-confirm">
            </div>
        </form>
    </div>
</div>



<script src="http://localhost:3000/socket.io/socket.io.js"></script>
<script src="Messages.js"></script>
</body>
</html>

================================================================================
FILE: idea/Messages.css
================================================================================

/* Messages.css */

/* Chat Container */
.messages-container {
    display: flex;
    height: calc(100vh - 140px);
    margin: 60px 0 0 250px; /* Account for header height and aside width */
    background-color: #ffffff;
}

/* Sidebar */
.chat-sidebar {
    width: 300px;
    border-right: 1px solid #e0e0e0;
    display: flex;
    flex-direction: column;
    background-color: #f8f9fa;
}

.chat-header {
    padding: 15px;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #fff;
}

.chat-header h2 {
    margin: 0;
    color: #333;
    font-size: 1.2em;
}

#createNewChatBtn {
    padding: 5px 12px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1.2em;
    transition: background-color 0.2s;
}

#createNewChatBtn:hover {
    background-color: #0056b3;
}

/* Chat List */
.chat-list {
    flex-grow: 1;
    overflow-y: auto;
}

.chat-item {
    display: flex;
    align-items: center;
    padding: 12px 15px;
    cursor: pointer;
    transition: background-color 0.2s;
    border-bottom: 1px solid #f0f0f0;
}

.chat-item:hover {
    background-color: #f0f0f0;
}

.chat-item.active-chat {
    background-color: #e3f2fd;
}

.chat-avatar-container {
    position: relative;
    margin-right: 12px;
}

.chat-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
}

.status-indicator {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid #fff;
}

.status-indicator.online {
    background-color: #28a745;
}

.status-indicator.offline {
    background-color: #6c757d;
}

.chat-item-details {
    flex-grow: 1;
    overflow: hidden;
}

.chat-name {
    display: block;
    font-weight: 500;
    color: #333;
    margin-bottom: 4px;
}

.last-message {
    display: block;
    font-size: 0.9em;
    color: #666;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/* Main Chat Area */
.messages-main-container {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    background-color: #ffffff;
    border-left: 1px solid #e0e0e0;
    height: 100%; /* Fixes the container height to prevent page scrolling */
}

.chat-info {
    padding: 15px 20px;
    border-bottom: 1px solid #e0e0e0;
    background-color: #fff;
}

.chat-title {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.chat-title h3 {
    margin: 0;
    color: #333;
}

#addUserToChatBtn {
    padding: 5px 12px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
}

#addUserToChatBtn:hover {
    background-color: #218838;
}

/* Participant List */
.chat-participants {
    font-size: 0.9em;
    color: #666;
    margin-top: 8px;
}

.participant-item {
    display: inline-flex;
    align-items: center;
    margin-right: 8px;
}

.participant-item .status-indicator {
    position: relative;
    display: inline-block;
    margin-right: 4px;
    width: 8px;
    height: 8px;
    border: 1px solid #fff;
}

/* Message List */
.message-list {
    flex-grow: 1;
    overflow-y: auto;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.chat-welcome-screen {
    flex-grow: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    color: #888;
}

.welcome-content .welcome-icon {
    width: 64px;
    height: 64px;
    margin-bottom: 1rem;
}

.welcome-content h2 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
}

.message-item {
    display: flex;
    max-width: 70%;
    align-items: flex-start;
}

.message-item.received {
    margin-right: auto;
}

.message-item.sent {
    margin-left: auto;
    flex-direction: row-reverse;
}

.message-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    margin: 0 8px;
    object-fit: cover;
}

.message-content {
    background-color: #fff;
    padding: 10px 15px;
    border-radius: 12px;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    position: relative;
}

.message-item.sent .message-content {
    background-color: #007bff;
    color: white;
}

.message-sender {
    font-size: 0.9em;
    font-weight: 500;
    margin-bottom: 4px;
    display: block;
}

.message-timestamp {
    font-size: 0.8em;
    color: #999;
    margin-top: 4px;
    display: block;
}

/* Message Input Area */
.message-input-container {
    padding: 15px;
    border-top: 1px solid #e0e0e0;
    display: flex;
    gap: 10px;
    background-color: #fff;
}

#messageInput {
    flex-grow: 1;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1em;
    resize: none;
}

#messageInput:focus {
    outline: none;
    border-color: #007bff;
}

#sendMessageBtn {
    padding: 8px 16px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
}

#sendMessageBtn:hover {
    background-color: #0056b3;
}

#sendMessageBtn:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}

/* User Selection in Modal */
.user-selection-list {
    max-height: 300px;
    overflow-y: auto;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    margin-top: 10px;
}

.user-item {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    border-bottom: 1px solid #f0f0f0;
    gap: 8px;
}

.user-item:last-child {
    border-bottom: none;
}

.user-checkbox {
    margin: 0;
    width: 16px;
    height: 16px;
    flex-shrink: 0;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 8px;
    flex: 1;
    margin-left: 4px;
}

.user-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    object-fit: cover;
    flex-shrink: 0;
}

.user-details {
    display: flex;
    flex-direction: column;
    gap: 2px;
    flex: 1;
}

.user-name {
    font-weight: 500;
    color: #333;
    margin: 0;
}

.user-group {
    font-size: 0.9em;
    color: #666;
    margin: 0;
}

/* Override any conflicting styles */
.modal-window .user-item {
    background: none !important;
    margin: 0 !important;
}

.modal-window .user-info {
    width: auto !important;
    margin: 0 0 0 4px !important;
}

.modal-window .user-checkbox {
    position: static !important;
    transform: none !important;
}

.modal-window .user-avatar {
    margin: 0 !important;
}

.modal-window .user-name,
.modal-window .user-group {
    padding: 0 !important;
}

/* Search input styling */
.user-search-input-messages {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1em;
    box-sizing: border-box;
    margin-bottom: 10px;
}

.user-search-input-messages:focus {
    outline: none;
    border-color: #007bff;
}

/* Modal Styles */
.modal-window {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
}

.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.modal-title {
    margin: 0;
    font-size: 1.5em;
    color: #333;
}

.close {
    background: none;
    border: none;
    font-size: 1.5em;
    cursor: pointer;
    color: #666;
    padding: 0;
    line-height: 1;
}

.close:hover {
    color: #333;
}

.modal-input {
    margin-bottom: 15px;
}

.modal-input label {
    display: block;
    margin-bottom: 5px;
    color: #333;
    font-weight: 500;
}

.modal-input input[type="text"] {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1em;
    box-sizing: border-box;
}

.modal-input input[type="text"]:focus {
    outline: none;
    border-color: #007bff;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
}

.modal-button-cancel,
.modal-button-confirm {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1em;
    min-width: 80px;
}

.modal-button-cancel {
    background-color: #f8f9fa;
    color: #333;
}

.modal-button-confirm {
    background-color: #007bff;
    color: white;
}

.modal-button-cancel:hover {
    background-color: #e9ecef;
}

.modal-button-confirm:hover {
    background-color: #0056b3;
}

.errorMessage {
    color: #dc3545;
    margin-top: 5px;
    display: none;
}

/* Responsive Design */
@media (max-width: 768px) {
    .messages-container {
        margin-left: 0;
        flex-direction: column;
    }

    .chat-sidebar {
        width: 100%;
        height: 300px;
    }

    .message-item {
        max-width: 85%;
    }

    .modal-content {
        width: 95%;
        margin: 20px auto;
    }
}

/* Fix for Students.css conflicts */
.messages-container {
    margin-left: 250px !important;
}

.message-item {
    background: none;
    padding: 0;
    margin: 10px 0;
}

.message-content {
    margin: 0;
    padding: 10px 15px;
}

/* Fix for notification dropdown */
.dropdownNotification {
    max-height: 400px;
    overflow-y: auto;
}

.dropdownNotification .message {
    margin: 5px;
    padding: 8px;
    border-radius: 4px;
    background-color: #f8f9fa;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.dropdownNotification .message:hover {
    background-color: #e9ecef;
}

.dropdownNotification .humanProfile {
    display: flex;
    align-items: center;
    gap: 8px;
}

.dropdownNotification .humanProfile img {
    width: 32px;
    height: 32px;
    border-radius: 50%;
}

.dropdownNotification .humanMessage {
    margin-top: 5px;
    padding: 8px;
    background-color: #fff;
    border-radius: 4px;
}

.dropdownNotification .message-timestamp {
    display: block;
    font-size: 0.8em;
    color: #6c757d;
    text-align: right;
    margin-top: 4px;
}

/* Bell animation */
@keyframes skew {
    0% { transform: skew(0deg); }
    50% { transform: skew(120deg); }
    100% { transform: skew(240deg); }
}

#bell {
    position: absolute;
    top: -16px;
    right: 0;
}

#notification-status {
    position: absolute;
    top: -5px;
    right: -5px;
    width: 10px;
    height: 10px;
    opacity: 0 !important; /* Hide by default */
    transition: opacity 0.3s ease;
}

/* Only show notification dot when explicitly set */
#notification-status.show {
    opacity: 100% !important;
}

.notification-item.unread {
    background-color: rgba(13, 110, 253, 0.1);
}

.notification-item.read {
    background-color: transparent;
}

================================================================================
FILE: idea/Dashboard.js
================================================================================

document.getElementById("menuBtn").addEventListener("click", () => {
    const menu = document.getElementById("navbarBurger");
    if (menu.style.display === "block") {
        menu.style.display = "none";
    } else {
        menu.style.display = "block";
    }
})

================================================================================
FILE: idea/Messages.js
================================================================================

// --- CONSTANTS ---
const JWT_TOKEN_KEY = "auth_token";
const SOCKET_SERVER = "http://localhost:3000";
const DEBOUNCE_DELAY = 100; // ms

// Initialize socket with auto-connect disabled
const socket = io(SOCKET_SERVER, {
    autoConnect: false,
    reconnection: true,
    reconnectionAttempts: 5,
    reconnectionDelay: 1000
});

// Global state
let currentUser = null;
let currentUserId = null;
let currentUserMysqlId = null;
let currentChatId = null;
let allUsersForSelection = [];
let fetchedChatsData = new Map();
let userStatusCache = new Map(); // Central cache for user statuses
let studentStatusCache = new Map(); // Cache for student statuses
let isAuthenticated = false; // Track authentication state
let lastChatUpdate = 0; // Track last chat update timestamp
let chatUpdateTimeout = null; // For debouncing

// Initialize chat when DOM is loaded
document.addEventListener("DOMContentLoaded", () => {
    // Cycle through waving hand images
    const wavingHandImg = document.querySelector('.welcome-content img.welcome-icon');
    if (wavingHandImg) {
        // Get the current index from localStorage or start at 0
        let currentHandIndex = parseInt(localStorage.getItem('wavingHandIndex') || '0');
        
        // Increment the index and wrap around if needed
        currentHandIndex = (currentHandIndex + 1) % 4; // 4 images (0 to 3)
        
        // Save the new index
        localStorage.setItem('wavingHandIndex', currentHandIndex.toString());
        
        // Set the appropriate image
        wavingHandImg.src = `assets/waving-hand${currentHandIndex || ''}.png`;
    }

    // Hide notification dot on initial load
    const notificationStatus = document.getElementById('notification-status');
    if (notificationStatus) {
        notificationStatus.classList.remove('show');
    }

    // Initialize chat
    initializeChat();

    // Set up event listeners
    setupEventListeners();

    // Set up status updates
    setupStatusUpdates();
    
    // Set up socket connection
    setupSocketEvents();
    
    // Load initial chats
    loadChats();

    // Check for pending chat selection
    const pendingChatId = sessionStorage.getItem('pending_chat_id');
    if (pendingChatId) {
        // Remove the pending chat ID
        sessionStorage.removeItem('pending_chat_id');
        // Wait for chats to load before selecting
        const checkChatsLoaded = setInterval(() => {
            if (fetchedChatsData.has(pendingChatId)) {
                selectChat(pendingChatId);
                clearInterval(checkChatsLoaded);
            }
        }, 100);
        // Clear the interval after 5 seconds if chat is not found
        setTimeout(() => clearInterval(checkChatsLoaded), 5000);
    }

    // Set up notification handling
    const notification = document.querySelector('.notification');
    const dropdownNotification = document.querySelector('.dropdownNotification');

    if (notification && notificationStatus && dropdownNotification) {
        // Clear any existing notifications on page load
        dropdownNotification.innerHTML = '';

        notification.addEventListener('mouseenter', () => {
            // Hide the red dot when viewing notifications
            notificationStatus.classList.remove('show');
            dropdownNotification.style.display = 'block';
            
            // Mark all current notifications as read
            const notifications = dropdownNotification.querySelectorAll('.notification-item');
            notifications.forEach(notif => {
                notif.classList.add('read');
            });
        });

        notification.addEventListener('mouseleave', () => {
            dropdownNotification.style.display = 'none';
            // Don't show the red dot after viewing notifications
            // It will only show again when new messages arrive
        });
    }
});

// Function to initialize chat
function initializeChat() {
    const storedUser = sessionStorage.getItem("user");
    const jwtToken = sessionStorage.getItem(JWT_TOKEN_KEY);

    if (!storedUser || !jwtToken) {
        console.error("User not logged in or JWT token missing. Chat disabled.");
        disableChatFunctionality("Please log in to use Messages.");
        window.location.href = "login.html";
        return false;
    }
    
    try {
        currentUser = JSON.parse(storedUser);
        // Ensure the user object has all required fields
        if (!currentUser.id && currentUser.mysql_user_id) {
            currentUser.id = currentUser.mysql_user_id;
        }
        console.log("Found user and token in sessionStorage. User:", currentUser);
        
        // Update the UI with user info
        updateUserProfile();

        // Connect socket with authentication
        socket.auth = {
            token: jwtToken,
            userInfo: {
                id: currentUser.id,
                first_name: currentUser.first_name,
                last_name: currentUser.last_name,
                avatar: currentUser.avatar || 'assets/profile-chat.png'
            }
        };
        socket.connect();

        return true;
    } catch (error) {
        console.error("Error initializing chat:", error);
        disableChatFunctionality("Error initializing chat. Please try again.");
        return false;
    }
}

// Function to update user profile in UI
function updateUserProfile() {
    const profileNameElement = document.getElementById("profileName");
    const profileImageElement = document.getElementById("profileUserImage");
    
    if (profileNameElement) {
        profileNameElement.textContent = `${currentUser.first_name} ${currentUser.last_name}`;
    }
    if (profileImageElement) {
        profileImageElement.src = currentUser.avatar || 'assets/user.png';
    }
}

// Function to set up event listeners
function setupEventListeners() {
    // Chat creation and editing
    setupChatCreation();
    
    // Message sending
    setupMessageSending();
    
    // Socket events
    setupSocketEvents();
}

// Function to set up chat creation
function setupChatCreation() {
    const createNewChatBtn = document.getElementById('createNewChatBtn');
    const newChatModal = document.getElementById('newChatModal');
    const closeNewChatModal = document.getElementById('closeNewChatModal');
    const cancelNewChat = document.getElementById('cancelNewChat');
    const newChatForm = document.getElementById('newChatForm');
    const userSearchInput = document.getElementById('userSearchInput');

    if (createNewChatBtn && newChatModal) {
        createNewChatBtn.addEventListener('click', async () => {
            newChatModal.style.display = 'block';
            await fetchAndDisplayUsers();
        });
    }

    if (closeNewChatModal && cancelNewChat && newChatModal) {
        const closeModal = () => {
            newChatModal.style.display = 'none';
            if (newChatForm) newChatForm.reset();
            const errorMessage = document.getElementById('errorMessageUsers');
            if (errorMessage) errorMessage.style.display = 'none';
        };

        closeNewChatModal.addEventListener('click', closeModal);
        cancelNewChat.addEventListener('click', closeModal);
        window.addEventListener('click', (e) => {
            if (e.target === newChatModal) closeModal();
        });
    }

    if (newChatForm) {
        newChatForm.addEventListener('submit', handleNewChatSubmission);
    }

    if (userSearchInput) {
        userSearchInput.addEventListener('input', (e) => {
            filterUsers(e.target.value);
        });
    }

    const editChatBtn = document.getElementById('editChatBtn');
    if (editChatBtn) {
        editChatBtn.addEventListener('click', () => {
            const chatData = fetchedChatsData.get(currentChatId);
            if (chatData) {
                openNewChatModal(true, chatData); // Open in edit mode
            }
        });
    }
}

function openNewChatModal(isEdit = false, chatData = null) {
    const newChatModal = document.getElementById('newChatModal');
    const newChatForm = document.getElementById('newChatForm');
    const chatNameInput = document.getElementById('chatNameInput');
    const modalTitle = newChatModal.querySelector('.modal-title');

    if (!newChatModal || !newChatForm || !chatNameInput || !modalTitle) return;

    newChatForm.reset();
    newChatModal.dataset.editMode = isEdit;
    
    if (isEdit && chatData) {
        modalTitle.textContent = 'Edit Chat';
        chatNameInput.value = chatData.name || '';
        newChatModal.dataset.chatId = chatData._id; // Store chat ID for submission
    } else {
        modalTitle.textContent = 'Create New Chat';
        delete newChatModal.dataset.chatId;
    }

    newChatModal.style.display = 'block';
    fetchAndDisplayUsers(chatData ? chatData.participants : []);
}

// Function to fetch and display users
async function fetchAndDisplayUsers(participants = []) {
    try {
        const token = sessionStorage.getItem('auth_token');
        console.log('Attempting to fetch users with token:', token);
        console.log('Making request to:', 'http://localhost:8888/students/all');

        const response = await fetch('http://localhost:8888/students/all', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('Raw response data:', data);

        if (data.success && Array.isArray(data.students)) {
            if (data.students.length > 0) {
                console.log('First student object for debugging:', data.students[0]);
            }
            allUsersForSelection = data.students;
            console.log('Processed users for selection:', allUsersForSelection);
            updateUserList(data.students);
        } else {
            console.error('Invalid response format:', data);
        }
    } catch (error) {
        console.error('Error fetching users:', error);
        alert('Failed to load users. Please try again.');
    }
}

// Function to handle new chat submission
async function handleNewChatSubmission(e) {
    e.preventDefault();
    const errorMessage = document.getElementById('errorMessageUsers');

    if (!currentUser || !currentUser.id) {
        console.error('Current user not properly initialized:', currentUser);
        if (errorMessage) {
            errorMessage.style.display = 'block';
            errorMessage.textContent = 'Error: User not properly initialized. Please try logging in again.';
        }
        return;
    }

    // Get the full user objects for selected participants
    const selectedUsers = Array.from(document.querySelectorAll('#userListForNewChat .user-checkbox:checked'))
        .map(checkbox => {
            const userItem = checkbox.closest('.user-item');
            const userId = parseInt(userItem.dataset.userId, 10);
            return allUsersForSelection.find(u => u.id === userId);
        })
        .filter(Boolean); // Filter out any undefined/null results

    // Find the current user's full object from the master list
    const currentUserObject = allUsersForSelection.find(u => u.id === parseInt(currentUser.id, 10));

    // Combine and ensure the current user is included
    let participantsData = [...selectedUsers];
    if (currentUserObject && !participantsData.some(p => p.id === currentUserObject.id)) {
        participantsData.push(currentUserObject);
    }
    
    // Remove duplicates, just in case
    participantsData = [...new Map(participantsData.map(item => [item['id'], item])).values()];

    console.log('Final list of participant objects being sent to server:', participantsData);

    const chatName = document.getElementById('chatNameInput').value.trim();

    // Basic validation
    if (participantsData.length < 2) {
        if (errorMessage) {
            errorMessage.style.display = 'block';
            errorMessage.textContent = 'Please select at least one other user.';
        }
        return;
    }
    
    const isEditMode = e.target.closest('#newChatModal').dataset.editMode === 'true';

    if (isEditMode) {
        const chatId = e.target.closest('#newChatModal').dataset.chatId;
        // Edit mode still sends MySQL IDs, as the users should already exist.
        const selectedUserIds = participantsData.map(p => p.id);
        socket.emit('updateChat', {
            chatId: chatId,
            name: chatName,
            participants: selectedUserIds
        });
    } else {
        // Emit the create chat event with the full participant data
        socket.emit('createNewChat', {
            participantsData: participantsData,
            groupName: chatName || null
        });
    }

    // Close and reset the modal
    const newChatModal = document.getElementById('newChatModal');
    if (newChatModal) {
        newChatModal.style.display = 'none';
        e.target.reset();
        if (errorMessage) {
            errorMessage.style.display = 'none';
        }
    }
}

// Function to fetch all students and their statuses
async function fetchAllStudentStatuses() {
    try {
        const token = sessionStorage.getItem('auth_token');
        const response = await fetch('http://localhost:8888/students/all', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('Students data:', data);

        if (data.success && Array.isArray(data.students)) {
            // Update the status cache
            data.students.forEach(student => {
                studentStatusCache.set(student.id.toString(), student.status || false);
            });
        }
    } catch (error) {
        console.error('Error fetching student statuses:', error);
    }
}

// Function to check user online status from cache
function checkUserStatus(mysqlUserId) {
    return Promise.resolve(studentStatusCache.get(mysqlUserId.toString()) || false);
}

// Function to update all status indicators
function updateAllStatusIndicators() {
    const statusIndicators = document.querySelectorAll('.status-indicator');
    const promises = Array.from(statusIndicators).map(indicator => {
        const userId = indicator.closest('[data-user-id]')?.dataset.userId;
        if (userId) {
            return checkUserStatus(userId).then(isOnline => {
                console.log('Status update for user', userId, ':', isOnline);
                indicator.className = `status-indicator ${isOnline ? 'online' : 'offline'}`;
            });
        }
        return Promise.resolve();
    });
    return Promise.all(promises);
}

// Debounce function
function debounce(func, wait) {
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(chatUpdateTimeout);
            func(...args);
        };
        clearTimeout(chatUpdateTimeout);
        chatUpdateTimeout = setTimeout(later, wait);
    };
}

// Function to update chat list
const updateChatList = debounce((chats) => {
    const now = Date.now();
    if (now - lastChatUpdate < DEBOUNCE_DELAY) {
        console.log('Skipping duplicate chat update');
        return;
    }
    lastChatUpdate = now;

    console.log('Updating chat list:', chats);
    // Sort chats by last message timestamp
    chats.sort((a, b) => {
        const timeA = a.lastMessage?.timestamp || 0;
        const timeB = b.lastMessage?.timestamp || 0;
        return timeB - timeA;
    });
    
    // Clear existing chats
    const chatList = document.getElementById('chatList');
    if (chatList) {
        chatList.innerHTML = '';
    }
    
    // Store chats data
    fetchedChatsData.clear();
    chats.forEach(chat => {
        fetchedChatsData.set(chat._id, chat);
        addChatToList(chat);
        // Join each chat room
        socket.emit('joinChat', chat._id);
    });
}, DEBOUNCE_DELAY);

// Function to set up socket events
function setupSocketEvents() {
    socket.on('connect', () => {
        console.log('Socket connected:', socket.id);
        if (!isAuthenticated) {
            // Send authentication only if not already authenticated
            socket.emit('authenticate', socket.auth);
        }
    });

    socket.on('authenticated', (data) => {
        if (isAuthenticated) {
            console.log('Already authenticated, ignoring duplicate event');
            return;
        }

        console.log('Successfully authenticated with chat server:', data);
        currentUserId = data.userId;
        currentUserMysqlId = data.mysqlId;
        isAuthenticated = true;

        // Update currentUser with the MySQL ID if not already set
        if (!currentUser.id) {
            currentUser.id = data.mysqlId;
        }

        console.log('Updated current user:', {
            currentUser,
            currentUserId,
            currentUserMysqlId
        });

        // Enable chat creation now that we are authenticated
        const createNewChatBtn = document.getElementById('createNewChatBtn');
        if (createNewChatBtn) {
            createNewChatBtn.disabled = false;
            createNewChatBtn.title = 'Create New Chat';
        }

        // Enable chat functionality
        const chatFunctionalArea = document.querySelector('.messages-main-container');
        if (chatFunctionalArea) {
            chatFunctionalArea.style.display = 'flex';
        }

        // Request user's chats after successful authentication
        socket.emit('getMyChats');
    });

    socket.on('disconnect', () => {
        console.log('Socket disconnected');
        isAuthenticated = false; // Reset authentication state on disconnect
        lastChatUpdate = 0; // Reset last chat update time
    });

    socket.on('chatCreatedSuccessfully', (newChat) => {
        console.log('Chat created successfully:', newChat);
        // Store the new chat in our local cache
        fetchedChatsData.set(newChat._id, newChat);
        // Get all current chats and add the new one
        const chats = Array.from(fetchedChatsData.values());
        // Update the chat list with the new chat included
        updateChatList(chats);
        // Automatically select the new chat
        selectChat(newChat._id);
        // Close the new chat modal
        const newChatModal = document.getElementById('newChatModal');
        if (newChatModal) {
            newChatModal.style.display = 'none';
            const newChatForm = document.getElementById('newChatForm');
            if (newChatForm) newChatForm.reset();
        }
    });

    socket.on('newChatCreated', (newChat) => {
        console.log('Added to new chat:', newChat);
        // Store the new chat in our local cache
        fetchedChatsData.set(newChat._id, newChat);
        // Get all current chats and add the new one
        const chats = Array.from(fetchedChatsData.values());
        // Update the chat list with the new chat included
        updateChatList(chats);
    });

    socket.on('authentication_error', (error) => {
        console.error('Chat authentication failed:', error);
        isAuthenticated = false;
        lastChatUpdate = 0;
        disableChatFunctionality(`Authentication failed: ${error}. Please re-login.`);
        
        // If token expired, clear session and redirect
        if (error.includes('jwt expired') || error.includes('invalid token')) {
            sessionStorage.removeItem("auth_token");
            sessionStorage.removeItem("user");
            // Update status to offline before redirecting
            fetch('http://localhost:8888/students/update-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: false })
            }).finally(() => {
                window.location.href = "login.html";
            });
        }
    });

    socket.on('newMessage', (message) => {
        console.log('Received new message:', message);
        if (message.chatId === currentChatId) {
            displayMessages(message.chatId, [message]);
        } else {
            // Show notification for messages in other chats
            showMessageNotification(message);
        }

        // Update the chat in the list with new last message
        const chat = fetchedChatsData.get(message.chatId);
        if (chat) {
            chat.lastMessage = message;
            // Get all current chats and update the list
            const chats = Array.from(fetchedChatsData.values());
            updateChatList(chats);
        }
    });

    socket.on('chatMessages', ({ chatId, messages }) => {
        console.log('Received chat messages:', { chatId, messageCount: messages.length });
        displayMessages(chatId, messages);
    });

    socket.on('myChats', (chats) => {
        console.log('Received user chats:', chats);
        updateChatList(chats);
    });

    socket.on('notification', (data) => {
        console.log('Received notification:', data);
        if (data.chatId !== currentChatId) {
            showMessageNotification(data.message);
        }
    });

    socket.on('userStatusChanged', ({ userId, online }) => {
        // Update the status cache
        userStatusCache.set(userId.toString(), online);
        
        // Update status indicators everywhere in the UI
        document.querySelectorAll(`[data-user-id="${userId}"] .status-indicator`).forEach(indicator => {
            indicator.className = `status-indicator ${online ? 'online' : 'offline'}`;
        });

        // Update chat list items
        fetchedChatsData.forEach((chat, chatId) => {
            const participant = chat.participants.find(p => p._id.toString() === userId.toString());
            if (participant) {
                participant.online = online;
                addChatToList(chat);
                if (chatId === currentChatId) {
                    displayChatParticipants(chat.participants);
                }
            }
        });
    });

    socket.on('connect_error', (error) => {
        console.error('Socket connection error:', error);
    });

    socket.on('error', (error) => {
        console.error('Socket error:', error);
    });
}

// Function to disable chat functionality
function disableChatFunctionality(message) {
    const chatArea = document.querySelector('.messages-main-container');
    if (chatArea) {
        chatArea.innerHTML = `<div class="chat-disabled-message">${message}</div>`;
    }
}

// Function to set up message sending
function setupMessageSending() {
    const messageInput = document.getElementById('messageInput');
    const sendMessageBtn = document.getElementById('sendMessageBtn');

    if (messageInput && sendMessageBtn) {
        // Handle message input
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
                if (messageInput.value.trim() && currentChatId) {
                    sendMessage(messageInput.value.trim());
                    messageInput.value = '';
                }
            }
        });

        // Handle send button click
        sendMessageBtn.addEventListener('click', () => {
            if (messageInput.value.trim() && currentChatId) {
                sendMessage(messageInput.value.trim());
                messageInput.value = '';
            }
        });
    }
}

// Function to send a message
function sendMessage(content) {
    if (!currentChatId || !content) return;
    
    socket.emit('sendMessage', {
        chatId: currentChatId,
        content: content
    });
}

// Function to update user list UI
function updateUserList(users) {
    const userListContainer = document.getElementById('userListForNewChat');
    if (!userListContainer) return;

    userListContainer.innerHTML = '';
    
    // Ensure we have a valid current user ID
    const currentUserId = currentUser && currentUser.id ? parseInt(currentUser.id) : null;
    console.log('Updating user list. Current user:', {
        user: currentUser,
        parsedId: currentUserId
    });

    // Filter out current user and create user items
    const otherUsers = users.filter(user => {
        const userId = parseInt(user.id);
        const isCurrentUser = userId === currentUserId;
        console.log('Comparing user:', {
            userId,
            currentUserId,
            isCurrentUser
        });
        return !isCurrentUser;
    });
    
    console.log('Other users:', otherUsers);

    otherUsers.forEach(user => {
        const userItem = document.createElement('div');
        userItem.className = 'user-item';
        userItem.dataset.userId = user.id.toString(); // Ensure it's a string in the dataset

        userItem.innerHTML = `
            <input type="checkbox" class="user-checkbox" id="user_${user.id}">
            <div class="user-info">
                <img src="${user.avatar || 'assets/user.png'}" alt="${user.first_name} ${user.last_name}" class="user-avatar">
                <div class="user-details">
                    <span class="user-name">${user.first_name} ${user.last_name}</span>
                    <span class="user-group">${user.group_name || ''}</span>
                </div>
            </div>
        `;

        userListContainer.appendChild(userItem);
    });

    // Show message if no other users available
    if (otherUsers.length === 0) {
        userListContainer.innerHTML = '<div class="no-users-message">No other users available</div>';
    }
}

// Function to filter users
function filterUsers(searchTerm) {
    const userItems = document.querySelectorAll('.user-item');
    userItems.forEach(item => {
        const userName = item.querySelector('.user-name').textContent.toLowerCase();
        const userGroup = item.querySelector('.user-group').textContent.toLowerCase();
        const matches = userName.includes(searchTerm.toLowerCase()) || 
                       userGroup.includes(searchTerm.toLowerCase());
        item.style.display = matches ? 'flex' : 'none';
    });
}

// Function to add a new chat to the list
function addChatToList(chat) {
    return new Promise((resolve) => {
        const chatList = document.getElementById('chatList');
        if (!chatList) {
            resolve();
            return;
        }

        let existingChat = document.querySelector(`[data-chat-id="${chat._id}"]`);
        
        const otherParticipants = chat.participants.filter(p => p._id.toString() !== currentUserId.toString());
        const isDirectChat = !chat.isGroupChat && otherParticipants.length === 1;
        const otherParticipant = isDirectChat ? otherParticipants[0] : null;
        
        // Get online status from cache for direct chats
        const statusPromise = isDirectChat && otherParticipant 
            ? checkUserStatus(otherParticipant.mysql_user_id)
            : Promise.resolve(false);

        statusPromise.then(isOnline => {
            console.log('Chat participant status:', {
                participant: otherParticipant?.mysql_user_id,
                isOnline
            });
            
            const chatName = chat.name || (otherParticipant ? `${otherParticipant.first_name} ${otherParticipant.last_name}` : 'Unnamed Group');

            const chatItemHTML = `
                <div class="chat-avatar-container">
                    <img src="${otherParticipant?.avatar || 'assets/group-chat.png'}" alt="${chatName}" class="chat-avatar">
                    ${isDirectChat ? `<span class="status-indicator ${isOnline ? 'online' : 'offline'}" data-user-id="${otherParticipant.mysql_user_id}"></span>` : ''}
                </div>
                <div class="chat-item-details">
                    <span class="chat-name">${chatName}</span>
                    ${chat.lastMessage ? `<span class="last-message">${chat.lastMessage.content}</span>` : ''}
                </div>
            `;

            if (existingChat) {
                existingChat.innerHTML = chatItemHTML;
            } else {
                const chatItem = document.createElement('div');
                chatItem.className = 'chat-item';
                chatItem.dataset.chatId = chat._id;
                chatItem.innerHTML = chatItemHTML;
                chatItem.addEventListener('click', () => selectChat(chat._id));
                chatList.appendChild(chatItem);
            }
            resolve();
        });
    });
}

// Function to select and display a chat
function selectChat(chatId) {
    if (currentChatId === chatId && document.getElementById('messageList').style.display !== 'none') {
        return; // Don't re-select the same chat if it's already visible
    }

    currentChatId = chatId;

    // Toggle active class on chat list
    document.querySelectorAll('.chat-item').forEach(item => {
        item.classList.remove('active-chat');
    });
    const selectedChatElement = document.querySelector(`[data-chat-id="${chatId}"]`);
    if (selectedChatElement) {
        selectedChatElement.classList.add('active-chat');
    }

    // Show message view, hide welcome screen
    const messageList = document.getElementById('messageList');
    const welcomeScreen = document.getElementById('chatWelcomeScreen');
    const chatInfo = document.getElementById('chatInfo');
    const messageInputContainer = document.getElementById('messageInputContainer');

    if (welcomeScreen) welcomeScreen.style.display = 'none';
    if (chatInfo) chatInfo.style.display = 'block';
    if (messageList) messageList.style.display = 'flex';
    if (messageInputContainer) messageInputContainer.style.display = 'flex';

    // Clear previous messages
    messageList.innerHTML = '';

    // Enable message input
    const messageInput = document.getElementById('messageInput');
    const sendMessageBtn = document.getElementById('sendMessageBtn');
    if (messageInput) messageInput.disabled = false;
    if (sendMessageBtn) sendMessageBtn.disabled = false;

    // Request new chat messages
    socket.emit('getChatMessages', chatId);

    // Update header with chat info
    const chatData = fetchedChatsData.get(chatId);
    if (!chatData) {
        console.warn(`Could not find cached data for chat ID ${chatId}`);
        return;
    }
    
    const otherParticipants = chatData.participants.filter(p => p.mysql_user_id !== currentUserMysqlId.toString());
    const isDirectChat = otherParticipants.length === 1;
    const chatName = chatData.name || (isDirectChat ? `${otherParticipants[0].first_name} ${otherParticipants[0].last_name}` : 'Unnamed Group');
    
    const chatNameElement = document.getElementById('currentChatName');
    if (chatNameElement) {
        chatNameElement.textContent = chatName;
    }

    displayChatParticipants(chatData.participants);

    const editChatBtn = document.getElementById('editChatBtn');
    if (editChatBtn) {
        const amCreator = chatData.createdBy && chatData.createdBy._id === currentUserId;
        editChatBtn.style.display = amCreator ? 'block' : 'none';
    }
}

function displayChatParticipants(participants) {
    const participantsContainer = document.getElementById('currentChatParticipants');
    if (!participantsContainer) return;

    participantsContainer.innerHTML = '<span>Participants: </span>';
    
    const promises = participants.map((p, index) => {
        return checkUserStatus(p.mysql_user_id).then(isOnline => {
            const participantSpan = document.createElement('span');
            participantSpan.className = 'participant-item';
            participantSpan.dataset.userId = p.mysql_user_id;

            const statusIndicator = `<span class="status-indicator ${isOnline ? 'online' : 'offline'}" data-user-id="${p.mysql_user_id}"></span>`;
            const displayName = p._id.toString() === currentUserId.toString() ? 'You' : `${p.first_name} ${p.last_name}`;

            participantSpan.innerHTML = `${statusIndicator} ${displayName}${index < participants.length - 1 ? ', ' : ''}`;
            participantsContainer.appendChild(participantSpan);
        });
    });

    return Promise.all(promises).then(() => {
        if (participants.length === 0) {
            participantsContainer.innerHTML = '<span>No participants.</span>';
        }
    });
}

// Function to show message notification
function showMessageNotification(message) {
    // Show notification dot and animate bell for new messages
    const notificationStatus = document.getElementById('notification-status');
    const bell = document.getElementById('bell');
    
    if (notificationStatus) {
        notificationStatus.classList.add('show');
    }
    
    if (bell) {
        // Remove any existing animation
        bell.style.animation = 'none';
        // Trigger reflow
        bell.offsetHeight;
        // Start new animation
        bell.style.animation = 'skew 3s 1';
    }

    // Update dropdown notification if exists
    const dropdownNotification = document.querySelector('.dropdownNotification');
    if (dropdownNotification) {
        // Check if notification for this message already exists
        const existingNotification = dropdownNotification.querySelector(`[data-message-id="${message._id}"]`);
        if (existingNotification) {
            return; // Skip if notification already exists
        }

        const notificationElement = document.createElement('div');
        notificationElement.className = 'message notification-item unread';  // Add unread class
        notificationElement.dataset.chatId = message.chatId;
        notificationElement.dataset.messageId = message._id;
        notificationElement.innerHTML = `
            <div class="humanProfile">
                <img src="${message.senderId.avatar || 'assets/user.png'}" alt="profile">
                <p>${message.senderId.first_name} ${message.senderId.last_name}</p>
            </div>
            <div class="humanMessage">
                <p>${message.content}</p>
                <span class="message-timestamp">${new Date(message.timestamp).toLocaleTimeString()}</span>
            </div>
        `;
        
        // Add click handler to navigate to the chat
        notificationElement.addEventListener('click', () => {
            if (window.location.pathname.endsWith('Messages.html')) {
                // If already on Messages page, just switch to the chat
                selectChat(message.chatId);
                // Hide the notification dropdown
                dropdownNotification.style.display = 'none';
                // Mark this notification as read
                notificationElement.classList.remove('unread');
                notificationElement.classList.add('read');
                
                // Check if all notifications are read
                const unreadNotifications = dropdownNotification.querySelectorAll('.notification-item.unread');
                if (unreadNotifications.length === 0) {
                    // If no unread notifications, hide the red dot
                    const notificationStatus = document.getElementById('notification-status');
                    if (notificationStatus) {
                        notificationStatus.classList.remove('show');
                    }
                }
            } else {
                // If on another page, store the chat ID and redirect
                sessionStorage.setItem('pending_chat_id', message.chatId);
                window.location.href = 'Messages.html';
            }
        });
        
        // Add at the top
        if (dropdownNotification.firstChild) {
            dropdownNotification.insertBefore(notificationElement, dropdownNotification.firstChild);
        } else {
            dropdownNotification.appendChild(notificationElement);
        }

        // Limit the number of notifications shown (keep last 10)
        const notifications = dropdownNotification.querySelectorAll('.notification-item');
        if (notifications.length > 10) {
            for (let i = 10; i < notifications.length; i++) {
                notifications[i].remove();
            }
        }
    }
}

// Function to display messages
function displayMessages(chatId, messages) {
    const messageList = document.getElementById('messageList');
    if (!messageList || chatId !== currentChatId) return;

    // The message list is now reliably cleared by the selectChat() function
    // before new messages are fetched. This function now only *appends* messages.

    // Ensure messages is always an array
    const messagesToDisplay = Array.isArray(messages) ? messages : [messages];

    messagesToDisplay.forEach(message => {
        // Skip if message is already displayed
        if (document.querySelector(`[data-message-id="${message._id}"]`)) {
            return;
        }

        const messageElement = document.createElement('div');
        messageElement.className = `message-item ${message.senderId._id === currentUserId ? 'sent' : 'received'}`;
        messageElement.dataset.messageId = message._id;

        messageElement.innerHTML = `
            ${message.senderId._id !== currentUserId ? `
                <img src="${message.senderId.avatar || 'assets/user.png'}" alt="${message.senderId.first_name}" class="message-avatar">
            ` : ''}
            <div class="message-content">
                <span class="message-sender">${message.senderId._id === currentUserId ? 'You' : `${message.senderId.first_name} ${message.senderId.last_name}`}</span>
                <p>${message.content}</p>
                <span class="message-timestamp">${new Date(message.timestamp).toLocaleTimeString()}</span>
            </div>
            ${message.senderId._id === currentUserId ? `
                <img src="${message.senderId.avatar || 'assets/user.png'}" alt="You" class="message-avatar">
            ` : ''}
        `;

        messageList.appendChild(messageElement);
    });

    // Scroll to bottom
    messageList.scrollTop = messageList.scrollHeight;
}

// Set up periodic status updates
function setupStatusUpdates() {
    // Initial fetch and update
    fetchAllStudentStatuses()
        .then(() => updateAllStatusIndicators())
        .catch(console.error);
    
    // Update statuses every 30 seconds
    setInterval(() => {
        fetchAllStudentStatuses()
            .then(() => updateAllStatusIndicators())
            .catch(console.error);
    }, 30000);
}

// Function to load chats
function loadChats() {
    if (!socket.connected) {
        console.log('Socket not connected, attempting to connect...');
        socket.connect();
    } else if (isAuthenticated) {
        // Only request chats if already authenticated
        socket.emit('getMyChats');
    }
    // If not authenticated, the authenticated event handler will request chats
}

================================================================================
FILE: idea/sw.js
================================================================================

const CACHE_NAME = "pwa-cms-cache-v1";
const ASSETS = [
    "/PI-CMS/idea/Dashboard.js",
    "/PI-CMS/idea/Dashboard.html",
    "/PI-CMS/idea/Students.html",
    "/PI-CMS/idea/init_sw.js",
    "/PI-CMS/idea/manifest.json",
    "/PI-CMS/idea/Messages.html",
    "/PI-CMS/idea/Messages.js",
    "/PI-CMS/idea/Students.css",
    "/PI-CMS/idea/Students.js",
    "/PI-CMS/idea/sw.js",
    "/PI-CMS/idea/Tasks.html",
    "/PI-CMS/idea/Tasks.js",
    "/PI-CMS/idea/assets/Amethyst.png",
    "/PI-CMS/idea/assets/bell.png",
    "/PI-CMS/idea/assets/Garnet.png",
    "/PI-CMS/idea/assets/isaac.gif",
    "/PI-CMS/idea/assets/Menu.png",
    "/PI-CMS/idea/assets/notification.png",
    "/PI-CMS/idea/assets/Pearl.png",
    "/PI-CMS/idea/assets/pngegg.png",
    "/PI-CMS/idea/assets/status_off.png",
    "/PI-CMS/idea/assets/status_on.png",
    "/PI-CMS/idea/assets/user.png",
];

// Встановлення Service Worker та кешування файлів
self.addEventListener("install", (event) => {
    event.waitUntil(
        caches.open(CACHE_NAME).then((cache) => {
            console.log('Caching files');
            return Promise.all(
                ASSETS.map((asset) => {
                    return fetch(asset)
                        .then((response) => {
                            if (!response.ok) {
                                console.warn(`Failed to fetch ${asset}: ${response.status}`);
                                return; // Skip caching this asset
                            }
                            return cache.put(asset, response);
                        })
                        .catch((err) => {
                            console.error(`Error caching ${asset}: ${err}`);
                        });
                })
            ).then(() => console.log('Caching complete'));
        }).catch((err) => console.error('Install failed:', err))
    );
});

// Перехоплення запитів і завантаження з кешу
self.addEventListener('fetch', event => {
    event.respondWith(
        caches.match(event.request)
            .then(response => response || fetch(event.request))
    );
});

// Оновлення Service Worker і видалення старого кешу
self.addEventListener("activate", (event) => {
    console.log('Updating cache');
    event.waitUntil(
        caches
            .keys()
            .then((keys) => {
                return Promise.all(
                    keys
                        .filter((key) => key !== CACHE_NAME)
                        .map((key) => caches.delete(key))
                );
            })
            .then(() => {
                return self.clients.claim(); // Підключаємо новий SW до всіх вкладок
            })
    );
});

================================================================================
FILE: .idea/Students.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Internet Programming</title>
    <link rel="stylesheet" href="Students.css">
    <link rel="icon" type="image/gif" href="assets/isaac.gif">
</head>
<body>
<header>
    <div class="burgerMenu">
        <button id="menuBtn">
            <img src="assets/Menu.png" alt="Burger menu" id="menu">
        </button>
        <nav class="navbar" id="navbarBurger">
            <ul>
                <li><a href="Dashboard.html">Dashboard</a></li>
                <li><a href="Students.html"><b>Students</b></a></li>
                <li><a href="Tasks.html" >Tasks</a></li>
            </ul>
        </nav>
    </div>
    <h1><a href="Students.html" title="Students page">CMS</a></h1>
    <div class="right-header">
        <div class="notification">
            <a href="Messages.html">
                <img id="bell" src="assets/bell.png" alt="Bell">
                <img id="notification-status" src="assets/notification.png" alt="notification status">
            </a>
            <div class="dropdownNotification">
                <div class="message" id="human1">
                    <div class="humanProfile">
                        <img src="assets/Amethyst.png" alt="profile">
                        <p>Amethyst</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hi guys</p>
                    </div>
                </div>
                <div class="message" id="human2">
                    <div class="humanProfile">
                        <img src="assets/Garnet.png" alt="profile">
                        <p>Garnet</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hello</p>
                    </div>
                </div>
                <div class="message" id="human3">
                    <div class="humanProfile">
                        <img src="assets/Pearl.png" alt="profile">
                        <p>Pearl</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hi</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="profile" title="Profile">
            <div class="account-container">
                <img src="assets/user.png" alt="user" width="32" height="32">
                <h2 id="profileName">Ihor Braichenko</h2>
            </div>

            <div class="dropdown">
                <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank">Profile</a>
                <br>
                <a href="">Log out</a>
            </div>
        </div>
    </div>

</header>

<aside>
    <nav class="navbar">
        <ul>
            <li><a href="Dashboard.html">Dashboard</a></li>
            <li><a href="Students.html"><b>Students</b></a></li>
            <li><a href="Tasks.html" >Tasks</a></li>
        </ul>
    </nav>
</aside>

<main>
    <div id="students">
        <h2>Students</h2>
        <button id="addStudent"><b>+</b></button>
    </div>
    <div id="table">
        <table id="tableStudents">
            <tr>
                <th>
                    <label for="idStudentMain" id="idLabel">id</label>
                    <input type="checkbox" class="checkbox" id="idStudentMain">
                </th>
                <th>Group</th>
                <th>Name</th>
                <th>Gender</th>
                <th>Birthday</th>
                <th>Status</th>
                <th>Options</th>
            </tr>
        </table>
    </div>
    <div id="pagination">
        <button id="previousPage"><b>&laquo;</b></button>
        <button id="page1"><b>1</b></button>
        <button id="page2"><b>2</b></button>
        <button id="page3"><b>3</b></button>
        <button id="nextPage"><b>&raquo;</b></button>
    </div>

    <div class="modal-window" id="addEditStudent">
        <div class="modal-backdrop"></div>
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="newStudentH2">New Student</h2>
                <input type="submit" value="&times;" class="close" title="close" id="close">
            </div>
            <hr>
            <form class="modal-form" id="form">
                <div class="modal-body">
                    <div class="modal-input">
                        <label for="group">Group</label>
                        <select id="group" name="Group" required>
                            <option value="">Select a group</option>
                            <option value="PZ-22">PZ-22</option>
                            <option value="PZ-21">PZ-21</option>
                            <option value="PZ-23">PZ-23</option>
                            <option value="PZ-24">PZ-24</option>
                            <option value="PZ-25">PZ-25</option>
                            <option value="PZ-26">PZ-26</option>
                            <option value="PZ-11">PZ-11</option>
                            <option value="PZ-12">PZ-12</option>
                            <option value="PZ-13">PZ-13</option>
                            <option value="PZ-14">PZ-14</option>
                            <option value="PZ-15">PZ-15</option>
                            <option value="PZ-16">PZ-16</option>
                            <option value="PZ-17">PZ-17</option>
                        </select>
                    </div>

                    <div class="modal-input">
                        <label for="firstName">First Name</label>
                        <input type="text" id="firstName" name="FirstName" required>
                    </div>

                    <div class="modal-input">
                        <label for="lastName">Last Name</label>
                        <input type="text" id="lastName" name="LastName" required>
                    </div>

                    <div class="modal-input">
                        <label for="gender">Gender</label>
                        <select id="gender" name="Gender" required>
                            <option value="">Select student's gender</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>

                    <div class="modal-input">
                        <label for="dateOfBirth">Birthday</label>
                        <input type="date" id="dateOfBirth" name="dateOfBirth" required>
                    </div>
                </div>
                <hr>
                <div class="modal-footer">
                   <input type="submit" value="Cancel" id="cancel">
                   <input type="submit" value="Confirm" id="confirm">
                </div>
            </form>
        </div>
    </div>

    <div class="modal-window" id="deleteStudent">
        <div class="modal-backdrop"></div>
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="deleteStudentH2Warning">WARNING!!!</h2>
                <button class="close" id="closeDelete">&times;</button>
            </div>
            <hr>
            <div class="modal-body">
                <p id="warningMessage">Are you sure you want to delete this student?</p>
            </div>
            <hr>
            <div class="modal-footer">
                <button class="cancel" id="cancelDelete">Cancel</button>
                <button class="confirm" id="delete">Delete</button>
            </div>
        </div>
    </div>
</main>
<script src="Students.js"></script>
</body>
</html>


================================================================================
FILE: .idea/Tasks.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Internet Programming</title>
    <link rel="stylesheet" href="Students.css">
    <link rel="icon" href="assets/isaac.gif">
</head>
<body>
<header>
    <div class="burgerMenu">
        <button id="menuBtn">
            <img src="assets/Menu.png" alt="Burger menu" id="menu">
        </button>
        <nav class="navbar" id="navbarBurger">
            <ul>
                <li><a href="Dashboard.html">Dashboard</a></li>
                <li><a href="Students.html"><b>Students</b></a></li>
                <li><a href="Tasks.html" >Tasks</a></li>
            </ul>
        </nav>
    </div>
    <h1><a href="Students.html" title="Students page">CMS</a></h1>
    <div class="right-header">
        <div class="notification">
            <a href="Messages.html">
                <img id="bell" src="assets/bell.png" alt="Bell">
                <img id="notification-status" src="assets/notification.png" alt="notification status">
            </a>
            <div class="dropdownNotification">
                <div class="message" id="human1">
                    <div class="humanProfile">
                        <img src="assets/Amethyst.png" alt="profile">
                        <p>Amethyst</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hi guys</p>
                    </div>
                </div>
                <div class="message" id="human2">
                    <div class="humanProfile">
                        <img src="assets/Garnet.png" alt="profile">
                        <p>Garnet</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hello</p>
                    </div>
                </div>
                <div class="message" id="human3">
                    <div class="humanProfile">
                        <img src="assets/Pearl.png" alt="profile">
                        <p>Pearl</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hi</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="profile" title="Profile">
            <div class="account-container">
                <img src="assets/user.png" alt="user" width="32" height="32">
                <h2 id="profileName">Ihor Braichenko</h2>
            </div>

            <div class="dropdown">
                <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank">Profile</a>
                <br>
                <a href="">Log out</a>
            </div>
        </div>
    </div>

</header>

<aside>
    <nav class="navbar">
        <ul>
            <li><a href="Dashboard.html">Dashboard</a></li>
            <li><a href="Students.html">Students</a></li>
            <li><a href="Tasks.html" ><b>Tasks</b></a></li>
        </ul>
    </nav>
</aside>


<main>
    <div id="students">
        <h2>Tasks</h2>
    </div>


</main>
<script src="Tasks.js"></script>
</body>
</html>


================================================================================
FILE: .idea/Students.css
================================================================================

* {
    box-sizing: border-box;
}

body {
    margin: 0;
}

header {
    background-color: #8c8c8c;
    color: white;
    display: flex;
    align-items: center;
}
#menuBtn {
    margin-left: 15px;
    background-color: #d6d6d6;
    border-radius: 10px;
    display: none;
}
#menu {
    height: 35px;
    width: 35px;
    cursor: pointer;
}

#navbarBurger {
    display: none;
}


h1 a {
    margin-left: 15px;
    color: white;
    text-decoration: none;
}

#bell {
    position: absolute;
    top: -16px;
    right: 0px;
}
.notification {
    position: relative;
}

#notification-status {
    width: 10px;
    height: 10px;
    position: absolute;
    top: -15px;
    left: -12px;
    opacity: 0;
    transition: opacity 1s ease-in-out;
}

@keyframes skew {
     0%{transform: skew(0deg);}
    50%{transform: skew(120deg)}
    100%{transform: skew(240deg)}
}

.right-header {
    margin-left: auto;
    margin-right: 15px;
    display: flex;
    align-items: center;
    position: relative;
}
.account-container  {
    display: flex;
    align-items: center;
}

.dropdown {
    display: none;
    position: absolute;
    top: 50px;
    background-color: gray;
    padding: 10px 20px;
    width: 80%;
    text-align: center;
}
.profile:hover .dropdown {
    display: block;
}
.dropdown a {
    color: #e4e4e4;
    text-decoration: none;
    text-wrap: nowrap;
    font-size: 20px;
    padding-left: 20px;
    padding-right: 20px;
}
.dropdown a:hover {
    background-color: #b3b3b3;
}

.dropdownNotification img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
}

.dropdownNotification {
    position: absolute;
    background-color: gray;
    padding: 8px;
    top: 15px;
    left: -30px;
    width: 240px;
    display: none;
}
.notification:hover .dropdownNotification {
    display: block;
}
.message {
    display: flex;
    justify-content: space-between;
    padding: 5px;
    background-color: #c5c5c5;
    color: black;
    margin: 5px;
    border-radius: 5px;
    padding-right: 0;
}
.humanProfile {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-left: 5px;
    margin-right: 5px;
    width: 30%
}
.humanProfile p {
    margin: 0;
}
.humanMessage {
    background-color: #fafafa;
    color: black;
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 60%;
    margin-right: 5px;
    border-radius: 5px;
}
.humanMessage p {
    margin: 0;
    padding: 10px;
}

main {
    margin-left: 15px;
    margin-right: 15px;
}

aside {
    width: 20%;
    float: left;
    height: 100vh;
}

.navbar ul{
    list-style-type: none;
}
.navbar li {
    font-size: 24px;
}
.navbar a {
    color: black;
    text-decoration: none;
}
.navbar a:hover {
    color: #727272;
}
.navbar a:active {
    color: darkgray;
}

#students {
    display: flex;
    justify-content: space-between;
    align-items: center;
}
#students button {
    height: 30px;
    width: 30px;
    font-size: 24px;
}

table {
    border-collapse: collapse;
    border-style: solid;
    float: left;
    width: 100%;
}
table td, table th{
    border: 1px solid black;
}
#table {
    overflow-x: scroll;
    width: 80%;
    margin-right: 15px;
}
.status-on, .status-off {
    width: 10px;
    height: 10px;
}

tr {
    text-align: center;
}
td p {
    margin: 0;
}
.idStudent, #idLabel {
    visibility: hidden;
    position: absolute;
}

#pagination {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}
#pagination button {
    margin: 5px;
}

.modal-window {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
}
.modal-content {
    transform: translate(-50%, -50%);
    background-color: white;
    position: absolute;
    width: 50%;
    top: 50%;
    left: 50%;
    border: black solid 1px;
    border-radius: 5px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
}
.modal-header h2 {
    margin: 8px;
}
.close {
    width: 50%;
    margin-top: 8px;
    margin-bottom: 0;
    margin-right: 8px;
    font-size: 22px;
}

.modal-body form{
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 8px;
}

.modal-input {
    display: flex;
    justify-content: space-between;
    margin: 4px;
}
.modal-input input, .modal-input select {
    width: 50%;
    padding: 4px;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 8px;
    margin-right: 8px;
}
#cancel {
    margin-right: 8px;
}

#cancelDelete {
    margin-right: 8px;
}

.modal-body p {
    margin: 8px;
}


@media screen and (max-width: 576px) {
    aside {
        display: none;
    }
    #table {
        width: 100%;
    }
    #menu {
        display: block;
    }

    #profileName {
        display: none;
    }

    .modal-input {
        flex-direction: column;
    }
    .modal-input input, .modal-input select {
        width: 100%;
        margin-bottom: 4px;
    }

    #navbarBurger {
        position: fixed;
        top: 80px;
        background-color: lightgray;
        height: calc(100vh - 80px);
        width: 100% !important;
    }
    #navbarBurger li {
        font-size: 18px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

    }

    .dropdownNotification {
        left: -230px;
    }
    .dropdown {
        top: 30px;
        left: -100px;
        width: 140px;
    }

}
@media (max-width: 768px) {
    aside {
        display: none;
    }
    #table {
        width: 100%;
    }
    #menuBtn {
        display: block;
    }

    #navbarBurger {
        position: fixed;
        top: 80px;
        background-color: lightgray;
        height: calc(100vh - 80px);
        width: 200px;
    }
    #navbarBurger li {
        font-size: 24px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        padding: 15px;
    }
}
@media (max-width: 992px) {
    .navbar li{
        font-size: 18px;
    }
}

================================================================================
FILE: .idea/Dashboard.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Internet Programming</title>
    <link rel="stylesheet" href="Students.css">
    <link rel="icon" href="assets/isaac.gif">
</head>
<body>
<header>
    <div class="burgerMenu">
        <button id="menuBtn">
            <img src="assets/Menu.png" alt="Burger menu" id="menu">
        </button>
        <nav class="navbar" id="navbarBurger">
            <ul>
                <li><a href="Dashboard.html">Dashboard</a></li>
                <li><a href="Students.html"><b>Students</b></a></li>
                <li><a href="Tasks.html" >Tasks</a></li>
            </ul>
        </nav>
    </div>
    <h1><a href="Students.html" title="Students page">CMS</a></h1>
    <div class="right-header">
        <div class="notification">
            <a href="Messages.html">
                <img id="bell" src="assets/bell.png" alt="Bell">
                <img id="notification-status" src="assets/notification.png" alt="notification status">
            </a>
            <div class="dropdownNotification">
                <div class="message" id="human1">
                    <div class="humanProfile">
                        <img src="assets/Amethyst.png" alt="profile">
                        <p>Amethyst</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hi guys</p>
                    </div>
                </div>
                <div class="message" id="human2">
                    <div class="humanProfile">
                        <img src="assets/Garnet.png" alt="profile">
                        <p>Garnet</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hello</p>
                    </div>
                </div>
                <div class="message" id="human3">
                    <div class="humanProfile">
                        <img src="assets/Pearl.png" alt="profile">
                        <p>Pearl</p>
                    </div>
                    <div class="humanMessage">
                        <p>Hi</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="profile" title="Profile">
            <div class="account-container">
                <img src="assets/user.png" alt="user" width="32" height="32">
                <h2 id="profileName">Ihor Braichenko</h2>
            </div>

            <div class="dropdown">
                <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank">Profile</a>
                <br>
                <a href="">Log out</a>
            </div>
        </div>
    </div>

</header>

<aside>
    <nav class="navbar">
        <ul>
            <li><a href="Dashboard.html"><b>Dashboard</b></a></li>
            <li><a href="Students.html">Students</a></li>
            <li><a href="Tasks.html" >Tasks</a></li>
        </ul>
    </nav>
</aside>


<main>

</main>
<script src="Dashboard.js"></script>
</body>
</html>


================================================================================
FILE: .idea/Tasks.js
================================================================================

document.getElementById("menuBtn").addEventListener("click", () => {
    const menu = document.getElementById("navbarBurger");
    if (menu.style.display === "block") {
        menu.style.display = "none";
    } else {
        menu.style.display = "block";
    }
})

================================================================================
FILE: .idea/Students.js
================================================================================

document.addEventListener("DOMContentLoaded", () => {
    document.getElementById("bell").style.animation = "skew 3s 1";
    setTimeout(() => {
        document.getElementById("notification-status").style.opacity = "100%";
    }, 900);
});

document.getElementById("menuBtn").addEventListener("click", () => {
    const menu = document.getElementById("navbarBurger");
    if (menu.style.display === "block") {
        menu.style.display = "none";
    } else {
        menu.style.display = "block";
    }
});

window.addEventListener("resize", () => {
    if (window.innerWidth > 768) {
         document.getElementById("navbarBurger").style.display = "none";
    }
});

const students = [];
let count = 0;
let chosenTableRow = [];

document.getElementById("addStudent").addEventListener("click", () => {
    document.getElementById("addEditStudent").style.display = "block";
    document.getElementById("newStudentH2").innerHTML = "New Student";
});

document.getElementById("idStudentMain").addEventListener("change", (e) => {
    const checkboxes = document.querySelectorAll(".checkbox");
    checkboxes.forEach((checkbox) => {
        checkbox.checked = document.getElementById("idStudentMain").checked;
    });
});

document.getElementById("form").addEventListener("submit", (e) => {
    e.preventDefault();
    if (e.submitter != document.getElementById("confirm")) return;

    const newStudent = document.createElement("tr");
    newStudent.classList.add("Students");
    document.getElementById("tableStudents").appendChild(newStudent);

    const newTableDataCheckbox = document.createElement("td");
    newStudent.appendChild(newTableDataCheckbox);
    const newLabel = document.createElement("label");
    newTableDataCheckbox.appendChild(newLabel);
    newLabel.classList.add("idStudent");
    newLabel.textContent = count;
    newLabel.style.visibility = "hidden";
    newLabel.setAttribute("for", count);
    const newCheckbox = document.createElement("input");
    newCheckbox.type = "checkbox";
    newTableDataCheckbox.appendChild(newCheckbox);
    newCheckbox.classList.add("checkbox");
    newCheckbox.id = count;

    const newTableDataGroup = document.createElement("td");
    newStudent.appendChild(newTableDataGroup);
    let group = document.getElementById("group").value;
    const newGroup = document.createElement("p");
    newGroup.textContent = group;
    newStudent.appendChild(newGroup);
    newTableDataGroup.appendChild(newGroup);

    const newTableDataName = document.createElement("td");
    newStudent.appendChild(newTableDataName);
    let name = document.getElementById("firstName").value + " " + document.getElementById("lastName").value;
    const newName = document.createElement("p");
    newName.textContent = name;
    newStudent.appendChild(newName);
    newTableDataName.appendChild(newName);

    const newTableDataGender = document.createElement("td");
    newStudent.appendChild(newTableDataGender);
    let gender = document.getElementById("gender").value;
    const newGender = document.createElement("p");
    newGender.textContent = gender;
    newStudent.appendChild(newGender);
    newTableDataGender.appendChild(newGender);

    const newTableDataDate = document.createElement("td");
    newStudent.appendChild(newTableDataDate);
    let dateOfBirth = document.getElementById("dateOfBirth").value;
    const newDate = document.createElement("p");
    newDate.textContent = dateOfBirth;
    newStudent.appendChild(newDate);
    newTableDataDate.appendChild(newDate);

    const newTableDataStatus = document.createElement("td");
    newStudent.appendChild(newTableDataStatus);
    let status = (count%2 == 0) ? true : false;
    const newStatus = document.createElement("img");
    if (status) {
        newStatus.classList.add("status-on");
        newStatus.src = "assets/status_on.png";
    } else {
        newStatus.classList.add("status-off");
        newStatus.src = "assets/status_off.png";
    }
    newStatus.alt = "Status";
    newStudent.appendChild(newStatus);
    newTableDataStatus.appendChild(newStatus);

    const newTableDataOptions = document.createElement("td");
    newStudent.appendChild(newTableDataOptions);
    const newOptionsEdit = document.createElement("button");
    newOptionsEdit.id = "optionsEdit";
    newOptionsEdit.textContent = "edit";
    const newOptionsDelete = document.createElement("button");
    newOptionsDelete.id = "optionsDelete";
    newOptionsDelete.textContent = "delete";
    newTableDataOptions.appendChild(newOptionsEdit);
    newTableDataOptions.appendChild(newOptionsDelete);
    newOptionsEdit.addEventListener("click", (e) => {
        //TODO: add modal for edit
        //replaceChild
        const row = e.target.closest("tr");
        const checkbox = row.querySelector("input[type='checkbox']");
        if (!checkbox.checked) return;
        document.getElementById("addEditStudent").style.display = "block";
        document.getElementById("newStudentH2").innerHTML = "Edit Student";

    });
    newOptionsDelete.addEventListener("click", (e) => {
        const row = e.target.closest("tr");
        const checkbox = row.querySelector("input[type='checkbox']");
        if (!checkbox.checked) return;
        document.getElementById("deleteStudent").style.display = "block";
        chosenTableRow = [];

        const checkboxes = document.querySelectorAll(".checkbox");
        checkboxes.forEach((checkbox) => {
            if (checkbox.checked) {
                chosenTableRow.push(checkbox.closest("tr"));
            }
        });


        if (chosenTableRow.length == 1) {
            document.getElementById("warningMessage").textContent = `Are you sure you want to delete ${name}?`;
        } else if (chosenTableRow.length > 1) {
            document.getElementById("warningMessage").textContent = `Are you sure you want to delete those students?`;
        }
    });

    const student = {
        group: group,
        name: name,
        gender: gender,
        dateOfBirth: dateOfBirth,
        status: status,
        id: count
    };
    students.push(student);

    count++;
    document.getElementById("addEditStudent").style.display = "none";
    document.getElementById("group").value = "";
    document.getElementById("firstName").value = "";
    document.getElementById("lastName").value = "";
    document.getElementById("gender").value = "Male";
    document.getElementById("dateOfBirth").value = "";
});

document.getElementById("cancel").addEventListener("click", (e) => {
    document.getElementById("addEditStudent").style.display = "none";
    document.getElementById("addEditStudent").style.display = "none";
    document.getElementById("group").value = "";
    document.getElementById("firstName").value = "";
    document.getElementById("lastName").value = "";
    document.getElementById("gender").value = "Male";
    document.getElementById("dateOfBirth").value = "";
});
document.getElementById("close").addEventListener("click", (e) => {
    document.getElementById("addEditStudent").style.display = "none";
    document.getElementById("addEditStudent").style.display = "none";
    document.getElementById("group").value = "";
    document.getElementById("firstName").value = "";
    document.getElementById("lastName").value = "";
    document.getElementById("gender").value = "Male";
    document.getElementById("dateOfBirth").value = "";
});


document.getElementById("delete").addEventListener("click", (e) => {
    e.preventDefault();
    if (e.target != document.getElementById("delete")) return;

    chosenTableRow.forEach(row => {
        const studentId = row.querySelector("input[type='checkbox']").id;
        const rowIndex = students.findIndex(student => student.id === studentId);
        if (rowIndex !== -1) students.splice(rowIndex, 1);
        row.remove();
    });

    document.getElementById("deleteStudent").style.display = "none";
    chosenTableRow = [];
});
document.getElementById("c" +
    "ancelDelete").addEventListener("click", (e) => {
    document.getElementById("deleteStudent").style.display = "none";
});
document.getElementById("closeDelete").addEventListener("click", (e) => {
    document.getElementById("deleteStudent").style.display = "none";
});

================================================================================
FILE: .idea/Messages.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Internet Programming</title>
    <link rel="stylesheet" href="Students.css">
    <link rel="icon" type="image/gif" href="assets/isaac.gif">
</head>
<body>
<header>
  <div class="burgerMenu">
    <button id="menuBtn">
      <img src="assets/Menu.png" alt="Burger menu" id="menu">
    </button>
    <nav class="navbar" id="navbarBurger">
      <ul>
        <li><a href="Dashboard.html">Dashboard</a></li>
        <li><a href="Students.html"><b>Students</b></a></li>
        <li><a href="Tasks.html" >Tasks</a></li>
      </ul>
    </nav>
  </div>
  <h1><a href="Students.html" title="Students page">CMS</a></h1>
  <div class="right-header">
    <div class="notification">
      <a href="Messages.html">
        <img id="bell" src="assets/bell.png" alt="Bell">
        <img id="notification-status" src="assets/notification.png" alt="notification status">
      </a>
      <div class="dropdownNotification">
        <div class="message" id="human1">
          <div class="humanProfile">
            <img src="assets/Amethyst.png" alt="profile">
            <p>Amethyst</p>
          </div>
          <div class="humanMessage">
            <p>Hi guys</p>
          </div>
        </div>
        <div class="message" id="human2">
          <div class="humanProfile">
            <img src="assets/Garnet.png" alt="profile">
            <p>Garnet</p>
          </div>
          <div class="humanMessage">
            <p>Hello</p>
          </div>
        </div>
        <div class="message" id="human3">
          <div class="humanProfile">
            <img src="assets/Pearl.png" alt="profile">
            <p>Pearl</p>
          </div>
          <div class="humanMessage">
            <p>Hi</p>
          </div>
        </div>
      </div>
    </div>
    <div class="profile" title="Profile">
      <div class="account-container">
        <img src="assets/user.png" alt="user" width="32" height="32">
        <h2 id="profileName">Ihor Braichenko</h2>
      </div>

      <div class="dropdown">
        <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank">Profile</a>
        <br>
        <a href="">Log out</a>
      </div>
    </div>
  </div>

</header>

<aside>
  <nav class="navbar">
    <ul>
      <li><a href="Dashboard.html">Dashboard</a></li>
      <li><a href="Students.html"><b>Students</b></a></li>
      <li><a href="Tasks.html" >Tasks</a></li>
    </ul>
  </nav>
</aside>

<main>
  <div id="students">
    <h2>Messages</h2>
  </div>
</main>
<script src="Messages.js"></script>
</body>
</html>

================================================================================
FILE: .idea/Dashboard.js
================================================================================

document.getElementById("menuBtn").addEventListener("click", () => {
    const menu = document.getElementById("navbarBurger");
    if (menu.style.display === "block") {
        menu.style.display = "none";
    } else {
        menu.style.display = "block";
    }
})

================================================================================
FILE: .idea/Messages.js
================================================================================

document.getElementById("menuBtn").addEventListener("click", () => {
    const menu = document.getElementById("navbarBurger");
    if (menu.style.display === "block") {
        menu.style.display = "none";
    } else {
        menu.style.display = "block";
    }
})

(No .js, .css, or .html content appended in 'combined_web_content.txt' for Phase 2)
--- END OF COMBINED .js, .css, AND .html FILES ---
